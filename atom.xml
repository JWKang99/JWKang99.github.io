<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>解忧杂货铺</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jwkang99.github.io/"/>
  <updated>2021-06-20T15:11:13.310Z</updated>
  <id>https://jwkang99.github.io/</id>
  
  <author>
    <name>康宁</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字节笔试0613</title>
    <link href="https://jwkang99.github.io/posts/c3e2d5b.html"/>
    <id>https://jwkang99.github.io/posts/c3e2d5b.html</id>
    <published>2021-06-13T11:02:48.000Z</published>
    <updated>2021-06-20T15:11:13.310Z</updated>
    
    <content type="html"><![CDATA[<h5 id="3道编程题"><a href="#3道编程题" class="headerlink" title="3道编程题"></a>3道编程题</h5><ol><li>二叉树最大权值和</li></ol><p>给定一颗具有n节点的完全二叉树， 需要从这棵树中选择一部分节点，求其 最大权值和。</p><p>规则：如果选择了一个节点的任意子节点，则不可以选择这个节点。求这部分节点的数字和最大值。</p><ol><li>感染人群</li></ol><p>求给定N个人被感染和人与人之间的接触关系下，可以覆盖所有被感染人群，且人数最少的最优 路径。</p><ol><li>座位安排</li></ol><p>给定人数情况下，求座位数；</p><p>规则：不能有两个人挨着坐，每个人都按照观察最长连续空座位，然后选中间那个位子坐（如果有多个满足需求则取左边个）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;3道编程题&quot;&gt;&lt;a href=&quot;#3道编程题&quot; class=&quot;headerlink&quot; title=&quot;3道编程题&quot;&gt;&lt;/a&gt;3道编程题&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;二叉树最大权值和&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;给定一颗具有n节点的完全二叉树， 需要从这棵树中选择一部分
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://jwkang99.github.io/categories/uncategorized/"/>
    
    
      <category term="字节跳动" scheme="https://jwkang99.github.io/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾收集器</title>
    <link href="https://jwkang99.github.io/posts/b38f68fb.html"/>
    <id>https://jwkang99.github.io/posts/b38f68fb.html</id>
    <published>2021-05-17T02:02:48.000Z</published>
    <updated>2021-06-20T15:17:57.567Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/posts/b38f68fb/gc.png" data-fancybox="group" data-caption="hotspot虚拟机的垃圾收集器" class="fancybox"><img alt="hotspot虚拟机的垃圾收集器" style="zoom:70%;" title="hotspot虚拟机的垃圾收集器" data-src="/posts/b38f68fb/gc.png" class="lazyload"></a></p><p>上图展示了垃圾收集器中可以可以进行的组合。</p><p>以上垃圾收集器的所有关注点包括两个：<strong>吞吐量</strong>（CPU运行用户代码的时间比例）和<strong>停顿时间</strong>。</p><p><strong>短停顿时间</strong>：适合与用户交互的程序，良好的响应速度提升用户体验。</p><p><strong>高吞吐量适合</strong>：可以高效率利用CPU时间，尽快完成运算任务，适合在后台运算而不需要太多交互的任务。</p><h3 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1. Serial收集器"></a>1. Serial收集器</h3><p>单线程收集器，<strong>特点</strong></p><ol><li>只会使用一个CPU或者一个线程去收集垃圾，</li><li><strong>串行</strong>，在它进行垃圾收集时，<strong>必须暂停其他所有工作线程</strong>（Stop The World），直到它收集结束。</li><li>但是用户对这个暂停时间不可见。</li><li>Serial和Serial Old分别用在新生代（复制算法）和老年代（标记整理算法）。</li><li>Serial收集器仍是虚拟机运行在<strong>Client模式下</strong>的默认新生代收集器。</li></ol><p><a href="/posts/b38f68fb/serial.png" data-fancybox="group" data-caption="Serial/Serial Old收集过程" class="fancybox"><img alt="Serial/Serial Old收集过程" title="Serial/Serial Old收集过程" data-src="/posts/b38f68fb/serial.png" class="lazyload"></a></p><p><strong>优点</strong>：</p><ol><li>简单高效（和其他收集器的单线程相比）。</li><li>用户桌面应用场景中，可用内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。</li><li>在HotSpot虚拟机中，使用-XX:+UseSerialGC参数可以指定年轻代和老年代都使用串行收集器。</li></ol><h3 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2. ParNew收集器"></a>2. ParNew收集器</h3><p>ParNew收集器是Serial的多线程版本，<strong>特点</strong>：</p><ol><li>除了使用<strong>多条线程收集垃圾</strong>，其余的和Serial收集器完全一致，同样暂停其他所有线程（Stop The World）</li><li>因为目前只有ParNew能与CMS配合工作，故ParNew是许多运行在<strong>Server模式</strong>虚拟机的首选</li><li>ParNew在单CPU<strong>绝对不会</strong>有比Serial更好的效果，因为有线程交替执行</li><li>当然多CPU下，可以有效利用资源，效果更好</li><li>-XX:+UseConcMarkSweepGC默认新生代使用ParNew收集器，或者用+/-UseParNewGC强制指定或禁止它。</li></ol><p><a href="/posts/b38f68fb/parnew.png" data-fancybox="group" data-caption="ParNew/Serial Old收集过程" class="fancybox"><img alt="ParNew/Serial Old收集过程" title="ParNew/Serial Old收集过程" data-src="/posts/b38f68fb/parnew.png" class="lazyload"></a></p><h3 id="3-Parallel-Scavenge收集器"><a href="#3-Parallel-Scavenge收集器" class="headerlink" title="3. Parallel Scavenge收集器"></a>3. Parallel Scavenge收集器</h3><p>Parallel Scavenge收集器是一个<strong>新生代收集器</strong>（复制算法），并行的多线程收集器。</p><p>Parallel Scavenge收集器的关注点在于<strong>达到一个指定的吞吐量（CPU运行用户代码占比）</strong>。</p><p>提供两个参数：</p><ol><li>-XX：MaxGCPauseMillis：最大垃圾收集停顿时间，尽可能保证垃圾回收不超过该时间</li><li>-XX：GCTimeRatio：大于0小于100的整数，直接设置吞吐量大小，垃圾收集时间永远为单位1，例如把此参数设置为19，那允许的最大垃圾收集时间就占总时间的5% （即1/(1+19)）</li><li>-XX：+UseAdaptiveSizePolicy：开关参数，当这个参数被激活之后，不需要人工指定新生代的大小等细节参数，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，称为自适应的调节策略。</li></ol><h3 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4. Serial Old收集器"></a>4. Serial Old收集器</h3><p>Serial Old是Serial的老年代版本</p><ol><li>单线程，适用于在Client模式的虚拟机</li><li>在Server模式下可与Parallel Scavenge收集器搭配使用，或者作为CMS的后备方案</li></ol><h3 id="5-Parallel-Old收集器"><a href="#5-Parallel-Old收集器" class="headerlink" title="5. Parallel Old收集器"></a>5. Parallel Old收集器</h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用标记整理算法。</p><p>在注重吞吐量以及CPU资源敏感的场合中，可以优先考虑Parallel Scavenge+Parallel Old的组合。</p><p><a href="/posts/b38f68fb/parallel.png" data-fancybox="group" data-caption="parallel收集过程" class="fancybox"><img alt="parallel收集过程" title="parallel收集过程" data-src="/posts/b38f68fb/parallel.png" class="lazyload"></a></p><h3 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6. CMS收集器"></a>6. CMS收集器</h3><p>CMS（Concurrent Mark Sweep）收集器是老年代收集器，关注点：<strong>获取最短回收停顿时间</strong>，采用标记清除算法，<strong>特点</strong>：并发收集，低停顿。分为四个步骤</p><ol><li>初始标记：标记GC Roots能直接关联的对象，<strong>暂停用户线程</strong>，速度很快</li><li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，且用户线程可以与垃圾收集线程一起并发运行</li><li>重新标记：修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，采用用增量更新算法，<strong>停顿时间较短</strong></li><li>并发清除：回收标记对象，与用户进程并发运行</li></ol><p><a href="/posts/b38f68fb/CMS.png" data-fancybox="group" data-caption="cms收集过程" class="fancybox"><img alt="cms收集过程" title="cms收集过程" data-src="/posts/b38f68fb/CMS.png" class="lazyload"></a></p><p>缺点：</p><ol><li>对CPU资源<strong>非常敏感</strong>（并发程序共同点），虽然不会导致用户线程停顿，但是占用了CPU资源，会是应用程序变慢。</li><li>无法处理<strong>浮动垃圾</strong>，并发清除阶段用户还在运行，会产生新的垃圾（称为浮动垃圾），这些垃圾出现在标记之后，只能等下一次GC。</li><li>需要<strong>预留空间</strong>，要为运行的用户线程预留可用空间，故不能等老年底被填满了再GC。可通过参数-XX：CMSInitiatingOccupancyFraction设置CMS触发百分比。若在CMS的GC过程中，预留空间不足以用户运行，则会出现Concurrent Mode Failure失败， 执行启动后备<strong>预案</strong>：冻结用户线程的，启动Serial Old收集器重新收集老年代。</li><li>采用标记清除算法， 会有<strong>碎片产生</strong>，若无连续足够空间，不得不提前触发GC。CMS提供参数个-XX：+UseCMS-CompactAtFullCollection，打开之后用于在CMS收集器不得不进行Full GC时开启内存碎片的合并整理过程，但是<strong>必须停顿用户线程</strong>。还有另外一个参数-XX：CMSFullGCsBeforeCompaction，用于指定执行多少次无整理压缩的GC之后，整理一次空间。</li></ol><h3 id="7-Garbage-First收集器"><a href="#7-Garbage-First收集器" class="headerlink" title="7. Garbage First收集器"></a>7. Garbage First收集器</h3><p>G1收集器主要面向服务端应用。</p><p>之前的几个垃圾收集器只关注新生代（Minor GC）或老年代（Major GC）中之一的垃圾收集。</p><p>G1收集器跳出限制，面向java堆内任何区域组成<strong>回收集</strong>（Collection Set），衡量标准不再是它属于哪个分代，而是<strong>哪块内存中存放的垃圾数量最多</strong>，<strong>回收收益最大</strong>，这就是G1收集器的Mixed GC模式。</p><p>G1收集器基于Region实现上述目标：把java堆分为连续大小相等的<strong>多个Region区域</strong>，每个Region根据需要都可以是Survivor、Eden、或者老年代，针对扮演角色不同的Region区域采取<strong>不同的策略</strong>。</p><p>分为四个步骤：</p><ol><li>初始标记：标记GC Roots能直接关联的对象，并且指定每个Region中可以用于给并发执行的用户线程分配对象的空间区域，需要暂停用户线程，但是速度很快。</li><li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，且用户线程可以与垃圾收集线程一起并发运行。</li><li>最终标记：采用原始快照方法更新并发过程中被修改的标记</li><li>筛选回收：找出回收价值最大的Region，将其数据复制到空的Region上，必须暂停用户线程，清空Region区域</li></ol><p><a href="/posts/b38f68fb/g1.png" data-fancybox="group" data-caption="g1收集过程" class="fancybox"><img alt="g1收集过程" title="g1收集过程" data-src="/posts/b38f68fb/g1.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/posts/b38f68fb/gc.png&quot; data-fancybox=&quot;group&quot; data-caption=&quot;hotspot虚拟机的垃圾收集器&quot; class=&quot;fancybox&quot;&gt;&lt;img alt=&quot;hotspot虚拟机的垃圾收集器&quot; style
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/tags/jvm/"/>
    
      <category term="GC" scheme="https://jwkang99.github.io/tags/GC/"/>
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JVM运行时区域与OOM异常</title>
    <link href="https://jwkang99.github.io/posts/e70d4d38.html"/>
    <id>https://jwkang99.github.io/posts/e70d4d38.html</id>
    <published>2021-05-17T02:02:48.000Z</published>
    <updated>2021-06-21T14:39:32.055Z</updated>
    
    <content type="html"><![CDATA[<p>JVM将所管理的内存包括以下几个运行时数据区域。</p><p><a href="/posts/e70d4d38/java_area.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:70%" data-src="/posts/e70d4d38/java_area.png" class="lazyload"></a></p><h3 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h3><p>线程私有，用于指定当前线程正在执行的<strong>字节码指令地址</strong>，若执行的是本地方法，则计数器为空（Undefined），唯一一个没规定任何OutOfMemoryError（OOM）异常的区域。</p><h3 id="2-Java虚拟机栈"><a href="#2-Java虚拟机栈" class="headerlink" title="2. Java虚拟机栈"></a>2. Java虚拟机栈</h3><p>线程私有，与线程的生命周期相同，描述Java方法的执行。</p><p>每个方法的执行都会创建一个栈帧，存储<strong>局部变量表</strong>，操作数栈，方法出口等信息，一个方法从调用到执行完成，对应于一个栈帧入栈出栈的过程。</p><p><strong>局部变量表</strong>存放编译期可知的各种基本数据类型，对象的引用。局部变量表所需内存在编译期确定，运行时不变。</p><p> Java虚拟机栈存在StackOverflowError异常和OOM异常。如果线程请求的栈深度大于所允许的深度，抛出StackOverflowError异常；如果虚拟机栈可扩展，在扩展时没有足够内存，抛出OOM异常。</p><h3 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h3><p>与虚拟机栈作用类似，不过执行的是本地方法，同样会抛出StackOverflowError异常和OOM异常。</p><h3 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4. Java堆"></a>4. Java堆</h3><p>线程共享，几乎所有的实例对象在这里分配内存，但是JIT编译器的发展使得可能间接的分配在栈上。堆也是垃圾收集的主要区域，分为新生代和老年代。</p><p><strong>注</strong>：堆上仍有可能划分出线程私有的分配缓冲区（TLAB），在TLAB分配的对象仍在堆中。</p><p>-Xms：Java堆初始分配大小     -Xmx：Java堆最大可分配大小</p><p>Java堆可以物理不连续，但要逻辑连续。</p><p>没有足够内存分配对象会抛出OOM异常。</p><h3 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h3><p>线程共享，存储虚拟机加载的<strong>类信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、<strong>即时编译器编译后的代码</strong>等数据。</p><p>方法区是堆了一个逻辑分区，但是应该与堆区分开来，JDK1.8之前使用永久代实现方法区，故被称为永久代（但是并不等价）。JDK1.8之后原本放在永久代的常量池、静态变量和类型信息被移除到元空间中。方法区用本地内存实现（Native Memory）。</p><p>方法区会抛出OOM异常。</p><p><strong>运行时常量池</strong>是方法区的一部分，Class文件中有常量池，用于存放编译期生成的各种字面量和符号引用，在类加载后着些内容会<strong>进入方法区的常量池</strong>。</p><p>注：String.intern()的应用很重要。</p><h3 id="6-直接内存"><a href="#6-直接内存" class="headerlink" title="6.直接内存"></a>6.直接内存</h3><p>直接内存<strong>不是</strong>虚拟机运行时数据区的一部分，也不是虚拟机定义的区域。</p><p>NIO中，将本地函数库分配在堆外，java堆中的DirectByteBuffer对象引用该内存进行操作，避免Java堆和Native堆来回复制。</p><p>因为是逻辑内存，可能存在设置参数信息不当，导致超出物理内存总和，抛出OOM异常。</p><h3 id="7-抛出OOM异常情景"><a href="#7-抛出OOM异常情景" class="headerlink" title="7. 抛出OOM异常情景"></a>7. 抛出OOM异常情景</h3><h4 id="①-java堆溢出"><a href="#①-java堆溢出" class="headerlink" title="① java堆溢出"></a>① java堆溢出</h4><p>不断创建对象，并且保证GC Roots到对象之间有引用（避免回收），达到最大限制就会抛出OOM异常。例如创建List，不断往List中添加对象。</p><p>内存溢出：实际就是报OOM异常并且进一步提示Java heap space</p><p>内存泄漏：指程序在申请内存后，无法释放已申请的内存空间。就是你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了），而<strong>系统也不能再次将它分配给需要的程序</strong>。</p><h4 id="②-虚拟机栈和本地方法栈溢出"><a href="#②-虚拟机栈和本地方法栈溢出" class="headerlink" title="② 虚拟机栈和本地方法栈溢出"></a>② 虚拟机栈和本地方法栈溢出</h4><p>参数-Xss调整栈内存大小</p><p>StackOverflowError异常：如果线程请求的栈深度大于虚拟机所允许的最大深度。 OutOfMemoryError异常：如果虚拟机的栈内存允许动态扩展，扩展栈容量无法申请到足够的内存 。</p><p><strong>注</strong>：HotSpot虚拟机不支持扩展动态扩展栈大小，故栈区域运行时不会因为栈扩展你失败抛出OOM异常，只会因为栈无法容纳新的栈帧而抛出StackOverflowError异常。</p><p>触发StackOverflowError异常：</p><ul><li>递归调用不结束，栈深度增加</li><li>本地变量过多，导致栈帧过大</li></ul><p>触发OOM异常：</p><ul><li>不断创建不停止的线程，内存不够新建线程时，抛出OOM异常</li></ul><h4 id="③-方法区和运行时常量池溢出"><a href="#③-方法区和运行时常量池溢出" class="headerlink" title="③ 方法区和运行时常量池溢出"></a>③ 方法区和运行时常量池溢出</h4><p>场景：</p><ul><li><p>JDK7之前不断添加常量到常量池，限制方法区大小<code>String.valueOf(i++).intern()</code>就会导致运行时常量池OOM异常，并提示PermGen space。<br>JDK7及之后，字符串常量池被移至Java堆，限制方法区大小不会抛出上述异常，这时需要限制堆的大小。</p></li><li><p>运行时不断生成大量动态类（反射）</p></li></ul><h4 id="④-本机直接内存溢出"><a href="#④-本机直接内存溢出" class="headerlink" title="④  本机直接内存溢出"></a>④  本机直接内存溢出</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JVM将所管理的内存包括以下几个运行时数据区域。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/posts/e70d4d38/java_area.png&quot; data-fancybox=&quot;group&quot; data-caption=&quot;undefined&quot; class=&quot;fancybox&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://jwkang99.github.io/categories/uncategorized/"/>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/tags/jvm/"/>
    
      <category term="GC" scheme="https://jwkang99.github.io/tags/GC/"/>
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>类加载器</title>
    <link href="https://jwkang99.github.io/posts/70c5b892.html"/>
    <id>https://jwkang99.github.io/posts/70c5b892.html</id>
    <published>2021-05-16T12:51:53.000Z</published>
    <updated>2021-06-22T14:39:44.516Z</updated>
    
    <content type="html"><![CDATA[<p>类加载器的作用：通过全限定类名获取描述此类的二进制字节流</p><p><strong>类加载器的层次</strong></p><p><a href="/posts/70c5b892/class_loader.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:40%" data-src="/posts/70c5b892/class_loader.png" class="lazyload"></a></p><blockquote><p>注意: 这里父类加载器并不是通过继承关系来实现的，而是采用组合实现的。</p></blockquote><h4 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h4><p><strong>Java虚拟机角度</strong>，只有两种不同的加载器：<strong>启动类加载器</strong>（Bootstrap ClassLoader），由C++实现，是虚拟机的一部分；<strong>其他类加载器</strong>，由Java实现，独立于虚拟机之外，并且全部继承抽象类<code>java.lang.ClassLoader</code>。</p><p><strong>Java开发人员角度</strong>，有三种：</p><ol><li><p><strong>启动类加载器</strong>：Bootstrap ClassLoader</p><p>负责加载存放在<code>jre/lib</code>目录下，或者被<code>-Xbootclasspath</code>参数指定的路径中的，并且能被虚拟机识别的类库(如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载)到虚拟机内存。注：启动类加载器无法被Java程序直接引用。</p></li><li><p><strong>扩展类加载器</strong>：Extension ClassLoader</p><p>加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现，它负责加载<code>JDK\jre\lib\ext</code>目录中，或者由<code>java.ext.dirs</code>系统变量指定的路径中的所有类库(如javax.*开头的类)，开发者可以直接使用扩展类加载器，开发者可以直接使用扩展类加载器。</p></li><li><p><strong>应用程序类加载器</strong>：Application ClassLoader</p><p>该类加载器由<code>sun.misc.Launcher$AppClassLoader</code>来实现，它负责加载<strong>用户类路径</strong>(ClassPath)所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。该类加载器是<code>getClassLoader()</code>方法的返回值，所以也称系统类加载器。 </p></li></ol><p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。</p><p>编写了自己的ClassLoader，便可以做到如下几点:</p><ul><li>在执行非置信代码之前，自动验证数字签名。</li><li>动态地创建符合用户特定需要的定制化构建类。</li><li>从特定的场所取得java class，例如数据库中和网络中。</li></ul><h4 id="类加载有三种方式"><a href="#类加载有三种方式" class="headerlink" title="类加载有三种方式"></a>类加载有三种方式</h4><p>1、命令行启动应用时候由JVM初始化加载</p><p>2、通过Class.forName()方法动态加载</p><p>3、通过ClassLoader.loadClass()方法动态加载</p><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是<strong>把这个请求委派给父类加载器去完成</strong>，每一个层次的类加载器都是如此，因此所有的 加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p><p><strong>代码流程</strong>：先检查请求加载的类型是否已经被加载过，若没有则调用父加载器的 loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。假如父类加载器加载失败， 抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。</p><p><strong>双亲委派优势</strong></p><ul><li>系统类防止内存中出现多份同样的字节码</li><li>保证Java程序安全稳定运行</li></ul><h4 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h4><p>双亲委派机制就是让越基础的类由越顶层的加载器加载，但是也存在基础类调用回用户代码的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类加载器的作用：通过全限定类名获取描述此类的二进制字节流&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类加载器的层次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/posts/70c5b892/class_loader.png&quot; data-fancybox=&quot;group&quot; data
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/tags/jvm/"/>
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JVM判断对象是否可回收</title>
    <link href="https://jwkang99.github.io/posts/d51b6e9c.html"/>
    <id>https://jwkang99.github.io/posts/d51b6e9c.html</id>
    <published>2021-05-16T02:02:48.000Z</published>
    <updated>2021-06-11T14:11:36.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断对象是否可回收"><a href="#判断对象是否可回收" class="headerlink" title="判断对象是否可回收"></a>判断对象是否可回收</h2><h3 id="1-引用计数法"><a href="#1-引用计数法" class="headerlink" title="1 引用计数法"></a>1 引用计数法</h3><p>给每个对象添加一个<strong>引用计数器</strong>，每当一个地方引用它，计数器加1，失效就减1。任何时刻计数器为0的对象就是不可能在被使用的对象，说明该对象已死。</p><p>引用计数法实现简单，效率高。但是很难解决对象互相循环引用的问题。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object A = <span class="keyword">new</span> Object();</span><br><span class="line">Object B = <span class="keyword">new</span> Object();</span><br><span class="line">A.prop1 = B;</span><br><span class="line">B.prop1 = A;</span><br><span class="line">A=<span class="keyword">null</span>;</span><br><span class="line">B=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></div><p>上述例子若采用引用计数法，即使A,B对象占用的内存区域用不到了，A,B对象永远无法回收，因为计数器为1。</p><h3 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2 可达性分析算法"></a>2 可达性分析算法</h3><p>主流的商用程序语言主要使用的是<strong>可达性分析算法</strong>。</p><p>可达性分析算法是从一系列称为<strong>GC Roots</strong>的对象做为起点，开始搜索，走过的路径称为<strong>引用链</strong>，当一个对象到GC Roots没有任何引用链时，则该对象不可用，可以回收。</p><h4 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h4><p>GC Roots主要在全局性的引用（常量和静态变量）和执行上下文（栈帧的本变量表）中。分为两类，一类是<strong>生命周期很长</strong>的对象比如说类的静态变量，另一类是<strong>一定是有用的对象</strong>比如说栈帧的局部变量，这里代表了程序正在执行的地方，这里应用的对象一定是不能被回收的。Java可以作为GC Roots的对象包括下边几种：</p><p>① 虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。<br>② 方法区中<strong>类静态属性</strong>引用的对象，譬如Java类的<strong>引用类型</strong>静态变量。<br>③ 方法区中<strong>常量</strong>引用的对象，譬如<strong>字符串常量池</strong>（String Table）里的引用<br>④ 本地方法栈中JNI（即一般说的Native方法）引用的对象。<br>⑤ Java虚拟机内部的引用，如基本类型数据对应的Class对象，一些常驻的异常对象，类加载器等。<br>⑥ 所有被同步锁（synchronized关键字）持有的对象。</p><p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“<strong>临时性</strong>”地加入，共同构成完整GC Roots集合。举例：。。。</p><h3 id="3-引用类型"><a href="#3-引用类型" class="headerlink" title="3 引用类型"></a>3 引用类型</h3><p>上述两种方法都和引用有关，在JDK 1.2版之前，Java里面的引用是很传统的定义，只有“被引用”或者“未被引用”两种状态。</p><p>我们希望能描述一类对象：当内存空间还足够时，能保留在内存之中，如果内存空间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象，在很多系统的<strong>缓存功能</strong>都符合这样的应用场景。</p><p>在JDK 1.2版之后，Java对引用的概念进行了扩充，将引用分为<strong>强引用</strong>（Strongly Reference）、<strong>软引用</strong>（Soft Reference）、<strong>弱引用</strong>（Weak Reference）和<strong>虚引用</strong>（Phantom Reference）4种，这4种引用强度依次逐渐减弱。</p><ul><li><strong>强引用</strong>：最传统的引用的定义，是指直接引用赋值，类似<code>Object obj = new Object()</code>，只要强引用存在，GC就<strong>永远不会回收</strong>被引用的对象。</li><li><strong>软引用</strong>：描述一些还<strong>有用但非必需</strong>的对象。对于软引用关联的对象，<strong>在内存足够的时候，软引用对象不会被回收</strong>，在系统要发生内存溢出异常之前，将会把这些对象放入回收范围内进行第二次回收。如果这次回收hi没有足够内存，抛出OOM异常。</li><li><strong>弱引用</strong>：也用来描述<strong>非必需</strong>的对象，但强度比软引用更弱，弱引用的对象只能<strong>存活到下一次GC发生之前</strong>，垃圾收集器工作时，无论内存是否足够，只被弱引用的对象都要被回收。</li><li><strong>虚引用</strong>：<strong>最弱</strong>的引用关系，一个对象是否有虚引用，完全不会影响其生存时间，也无法通过虚引用取得一个对象实例。为一个对象设置虚引用的目的就是<strong>能在这个对象被回收时收到一个系统通知</strong>。</li></ul><h3 id="4-对象是否真的死亡"><a href="#4-对象是否真的死亡" class="headerlink" title="4 对象是否真的死亡"></a>4 对象是否真的死亡</h3><p>即使在可达性分析算法中不可达的对象，也<strong>不是非死不可</strong>，要真正宣告一个对象死亡，<strong>至少经过两次标记</strong>。</p><p>标记过程：如果没有从GC Roots到对象的引用链，就进行<strong>第一次标记</strong>，如果该对象<strong>覆盖</strong>了finalize()方法并且finalize()<strong>没被虚拟机执行</strong>过（满足这俩条件则有必要执行该对象的finalize方法），将该对象放在F-Queue队列中。稍后虚拟机<strong>启动一个线程</strong>触发队列中对象的finalize方法，随后GC将对F-Queue中的对象进行<strong>第二次标记</strong>，如果某对象在finalize方法里拯救了自己（即重新添加了引用），则不会标记该对象，并将其移除即将回收集合；否则，就要真的被回收了。</p><p><strong>注</strong>：finalize方法只能自动调用一次，也就是只能自救一次。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;判断对象是否可回收&quot;&gt;&lt;a href=&quot;#判断对象是否可回收&quot; class=&quot;headerlink&quot; title=&quot;判断对象是否可回收&quot;&gt;&lt;/a&gt;判断对象是否可回收&lt;/h2&gt;&lt;h3 id=&quot;1-引用计数法&quot;&gt;&lt;a href=&quot;#1-引用计数法&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/tags/jvm/"/>
    
      <category term="GC" scheme="https://jwkang99.github.io/tags/GC/"/>
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Minor/Major/Full GC</title>
    <link href="https://jwkang99.github.io/posts/13c7dd67.html"/>
    <id>https://jwkang99.github.io/posts/13c7dd67.html</id>
    <published>2021-05-16T02:02:48.000Z</published>
    <updated>2021-06-21T13:27:07.871Z</updated>
    
    <content type="html"><![CDATA[<p>对象的内存分配是在java堆上分配（也可能经过JIT编译后被拆散为标量间接分配在栈上），主要分配子新生代的Eden区，如果启动了本地线程分配缓冲，将按线程优先再TLAB上分配，少数情况直接分配在老年代。</p><p><a href="/posts/13c7dd67/generation.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="/posts/13c7dd67/generation.png" class="lazyload"></a></p><p>下边主要阐述Serial/Serial Old组合下的内存分配和回收策略。</p><p><strong>对象在新生代Eden区分配</strong>，若Eden没有足够空间，触发Minor GC</p><p><strong>Minor GC</strong>（因为有对象复制移动，stop-the-world）</p><p>发生在新生代，将From和Eden区存活的对象<strong>复制到To区域</strong>，当To区域不足以存放所有存活的对象时，通过老年代的<strong>内存担保</strong>，To区域放不下的存活对象<strong>提前</strong>进入老年代。</p><p><strong>大对象直接进入老年代</strong></p><p>通过参数了-XX：PretenureSizeThreshold设置大于指定大小的对象直接分配到老年代，避免在新生代产生大量复制大对象的操作。注：该参数只对Serial和ParNew两种新生代收集器有效。</p><p><strong>大龄对象进入老年代</strong></p><p>通过参数-XX： MaxTenuringThreshold（默认15）设置进入老年代年龄。对象在Eden区分配后，经历一次Minor GC年龄加1。</p><p><strong>动态判定对象年龄</strong></p><p>当Survivor区（From/To）中相同年龄的对象大小总和达到了Survivor的一半，<strong>大于等于</strong>该年龄的对象<strong>提前</strong>进入老年代。</p><p><strong>空间分配担保</strong></p><p>老年代会给新生代的回收座内存担保。<br>在Minor GC之前，</p><p>若老年代可用连续内存<strong>大于</strong>新生代所有对象总和，则<strong>Minor GC安全</strong>。<br>若老年代可用连续内存不能容纳所有新生代所有对象，则可能担保失败（即新生代放不下的存活对象在老年代也放不下，可能要丢弃）。</p><p>此时若虚拟机<strong>不允许担保失败</strong>，则进行一次Full GC。<br>若虚拟机<strong>允许担保失败</strong>，则检查每次从新生代转移到老年代对象的平均大小，若能放下，尝试Minor GC（失败后仍触发Full GC），若放不下触发Full GC。</p><p><strong>JDK6之后不再使用是否允许担保失败的参数</strong>。若老年代连续可用空间大于新生代对象总和或历次晋升的平均值，则触发Minor GC，否则Full GC。</p><p><strong>Full GC</strong></p><p>回收整个java堆，通常由Minor GC担保失败后触发，Full GC通常会包含一次Minor GC。</p><p><strong>Major GC</strong></p><p>CMS收集器中，当老年代满时会触发 Major GC。目前，只有CMS收集器会有单独收集老年代的行为。其他收集器均无此行为。针对新生代（主要指Eden区）的Minor GC 比较常见，各个收集器均支持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象的内存分配是在java堆上分配（也可能经过JIT编译后被拆散为标量间接分配在栈上），主要分配子新生代的Eden区，如果启动了本地线程分配缓冲，将按线程优先再TLAB上分配，少数情况直接分配在老年代。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/posts/13c7dd67/gen
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/tags/jvm/"/>
    
      <category term="GC" scheme="https://jwkang99.github.io/tags/GC/"/>
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾回收算法</title>
    <link href="https://jwkang99.github.io/posts/82902146.html"/>
    <id>https://jwkang99.github.io/posts/82902146.html</id>
    <published>2021-05-16T02:02:48.000Z</published>
    <updated>2021-06-21T08:35:59.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-标记-清除算法"><a href="#1-标记-清除算法" class="headerlink" title="1 标记-清除算法"></a>1 标记-清除算法</h3><p>标记出需要回收的对象，完成标记后统一回收。效率不高，容易出产生碎片，会导致触发多次GC。</p><h3 id="2-复制算法"><a href="#2-复制算法" class="headerlink" title="2 复制算法"></a>2 复制算法</h3><p>把内存容量分为相同的两部分，每次只使用其中的一半，触发GC时将存活的对象放在另外一半上，再把另一半完全清理了，<strong>不会产生碎片</strong>，代价是<strong>缩小了可用内存</strong>。</p><p>因为<strong>新生代</strong>98%的对象朝生夕死，所以不需要1:1划分，而是分成一块较大的Eden区和两块大小相等的Survivor区，比例为8:1:1，只使用Eden和一块Survivor区采用复制算法，这样只有10%的内存被浪费了。当然也不能保证每次GC中存活的对象都不超过10%，所以就需要老年代的内存做<strong>分配担保</strong>，也就是老年代给新生代擦屁股。</p><p>复制算法在对象存活率较高时就需要进行<strong>较多复制操作</strong>，<strong>效率就会变低</strong>。而且复制算法需要额外内存进行担保，所以老年代不用复制算法。</p><h3 id="3-标记-整理算法"><a href="#3-标记-整理算法" class="headerlink" title="3 标记-整理算法"></a>3 标记-整理算法</h3><p>标记之后将存活的对象移到一端，然后直接清除掉边界之外的内存。</p><h3 id="4-分代收集算法"><a href="#4-分代收集算法" class="headerlink" title="4 分代收集算法"></a>4 分代收集算法</h3><p>根据存活周期不同，分代收集。<strong>新生代</strong>复制算法，<strong>老年代</strong>没有额外空间担保标记-清除或者标记-整理算法。</p><h3 id="5-HotSpot的上述算法实现"><a href="#5-HotSpot的上述算法实现" class="headerlink" title="5 HotSpot的上述算法实现"></a>5 HotSpot的上述算法实现</h3><h4 id="GC-Roots枚举"><a href="#GC-Roots枚举" class="headerlink" title="GC Roots枚举"></a>GC Roots枚举</h4><p>GC Roots主要在全局性的引用（常量和静态变量）和执行上下文（栈帧的本变量表）中，<strong>逐个检查必然会消耗很多时间</strong>。</p><p>可达性分析时必须在一个<strong>确保一致性的快照</strong>中进行，获取快照将导致<strong>用户线程暂停</strong>（Stop The World）。</p><p>HotSpot使用<strong>准确式GC</strong>，系统停顿之后不需要一个不漏的检查所有全局性引用和执行上下文，通过<strong>OopMap（还不太理解？）</strong>的数据结构直接得知哪些地方存着对象引用。在类加载完之后，就把对象内什么偏移量上是什么类型的数据计算出来。在JIT编译过程中，也会在特定位置记录栈和寄存器中哪些位置是引用。</p><p>因此GC在扫描时就可以快速准确的完成GC Roots枚举。</p><h4 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h4><p>再看看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-标记-清除算法&quot;&gt;&lt;a href=&quot;#1-标记-清除算法&quot; class=&quot;headerlink&quot; title=&quot;1 标记-清除算法&quot;&gt;&lt;/a&gt;1 标记-清除算法&lt;/h3&gt;&lt;p&gt;标记出需要回收的对象，完成标记后统一回收。效率不高，容易出产生碎片，会导致触发多次G
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/tags/jvm/"/>
    
      <category term="GC" scheme="https://jwkang99.github.io/tags/GC/"/>
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾回收和内存分配策略</title>
    <link href="https://jwkang99.github.io/posts/566ec62f.html"/>
    <id>https://jwkang99.github.io/posts/566ec62f.html</id>
    <published>2021-05-16T02:02:48.000Z</published>
    <updated>2021-06-21T13:27:28.370Z</updated>
    
    <content type="html"><![CDATA[<p>java运行时内存包括程序计数器、本地方法栈、虚拟机栈、java堆和方法区。</p><p><strong>程序计数器、本地方法栈、虚拟机栈</strong>是<strong>线程</strong>私有的，这三个区域随线程生灭，栈中的栈帧随方法进入退出而进行着出栈入栈的操作，每一个栈帧分配多少内存基本上是再类结构确定下来时就已知，因此这几个区域的内存分配和回收具备确定性，就不需要过多考虑回收的问题，因为方法结束或者线程结束，内存自然就回收了。</p><p><strong>Java堆和方法区</strong>不一样，是所有线程共享的区域，一个接口的多个实现类所需内存可能不一样，一个方法的多个分支需要的内存可能不一样只有程序在运行时才能知道会创建哪些对象，这部分内存分配和回收都是动态的，垃圾回收关注的也是这部分内存。</p><p>① <a href="./d51b6e9c.html">判断对象是否可回收</a></p><p>② <a href="82902146.html">垃圾回收算法</a></p><p>③ <a href="./b38f68fb.html">垃圾收集器</a></p><p>④ <a href="./13c7dd67.html">内存分配和回收策略</a></p><p><strong>方法区垃圾回收</strong>单独拿出来说：</p><p>方法区（HotSpot虚拟机中的永久代）的垃圾回收在JVM没做要求，因为在永久代中回收效率太低。</p><p>永久代主要回收两部分：废弃<strong>常量</strong>和无用的<strong>类</strong>。</p><p><strong>废弃常量回收</strong>和java堆中的回收类似，如果没有任何String类型对象引用常量池中的字符串<code>abc</code>，有必要的话会清理这个字符串常量。</p><p><strong>无用类</strong>回收需满足三个条件，但并不一定会被回收，有参数进行控制</p><p>① 该类所有实例都被回收<br>② 加载该类的ClassLoader已经被回收<br>③ 该类的Class对象没被引用，没有地方通过反射访问该类的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java运行时内存包括程序计数器、本地方法栈、虚拟机栈、java堆和方法区。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序计数器、本地方法栈、虚拟机栈&lt;/strong&gt;是&lt;strong&gt;线程&lt;/strong&gt;私有的，这三个区域随线程生灭，栈中的栈帧随方法进入退出而进行着出栈入栈的操作
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/tags/jvm/"/>
    
      <category term="GC" scheme="https://jwkang99.github.io/tags/GC/"/>
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java类加载机制</title>
    <link href="https://jwkang99.github.io/posts/6d27f500.html"/>
    <id>https://jwkang99.github.io/posts/6d27f500.html</id>
    <published>2021-05-13T07:02:48.000Z</published>
    <updated>2021-06-22T14:39:19.125Z</updated>
    
    <content type="html"><![CDATA[<p>类加载机制：虚拟机将描述类的数据从class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机可以直接使用的java类型。</p><p>类从被加载都虚拟机内存中开始，到写在出内存为止，整个生命周期包括：<strong>加载</strong>、<strong>验证</strong>、<strong>准备</strong>、<strong>解析</strong>、<strong>初始化</strong>、<strong>使用</strong>和<strong>卸载</strong>7个阶段。其中验证、准备、解析3个部分统称为<strong>连接</strong>。</p><p><a href="/posts/6d27f500/life.jpg" data-fancybox="group" data-caption="类的生命周期" class="fancybox"><img alt="类的生命周期" zoom="70%" title="类的生命周期" data-src="/posts/6d27f500/life.jpg" class="lazyload"></a></p><p>其中，加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的（开始的顺序确定，但是进行和完成可能是交叉进行的）。由于java的运行时绑定（动态绑定），<strong>解析</strong>可能会在某种情况下在<strong>初始化之后</strong>才开始。</p><p><strong>类加载的时机</strong></p><p><strong>有且仅有</strong>5种情况，必须立即对类进行<strong>初始化</strong>（加载、验证、准备当然也必须在这之前完成）</p><p>① 遇到new、getstatic、putstatic、或者invokestatic这4调字节码指令时，如果类没有进行初始化，则需要先触发初始化。这4条指令要么新建一个该类的<strong>实例</strong>，或者与<strong>静态操作</strong>相关，不难理解必需先初始化该类。不过被<strong>final修饰的静态字段</strong>除外，因为其已经自编译时被放入<strong>常量池</strong>。</p><p>② 在使用<code>java.lang.reflect</code>对类进行<strong>反射调用</strong>时，须先初始化。</p><p>③ 初始化一个类时，其父类还未初始化，须先初始化<strong>父类</strong>。（<strong>注</strong>：接口在此处不同真正用到时才会初始化父接口）</p><p>④ 虚拟机启动时，先初始化用户指定的执行<strong>主类</strong>。</p><p>⑤ 一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果中，<strong>方法句柄</strong>对应的类，须先初始化。（似乎是JDK1.7之后才有的）</p><p>以上5种统称为对类的<strong>主动引用</strong>，被动引用不会触发初始化。<br>被动例子：</p><ol><li><strong>子类使用父类的静态字段</strong>，跟子类没关系，故子类不会初始化。</li><li><strong>定义一个该类的数组</strong>Object[] arr，不会初始化该类，因为没有用到类，可以使用的只有a.length和a.clone()。</li><li><strong>final修饰的静态字段</strong>在编译阶段会存入<strong>调用类</strong>（注：不是该字段的所属类）的常量池，不会触发初始化。</li></ol><h3 id="一、加载：查找并加载类的二进制数据"><a href="#一、加载：查找并加载类的二进制数据" class="headerlink" title="一、加载：查找并加载类的二进制数据"></a>一、加载：查找并加载类的二进制数据</h3><p><strong>加载</strong>是<strong>类加载过程</strong>的一个阶段，该阶段虚拟机完成3件事：<br>① 通过类的全限定名<strong>获取类的二进制字节流</strong>。（<strong>where</strong>：从ZIP、JAR、网络、运行时计算中等等获取，<strong>how</strong>：系统提供的加载器或自定义加载器，<a href="./70c5b892.html">这里</a>介绍类加载器）<br>② 将字节流所代表的静态存储结构<strong>转化</strong>为方法区的运行时数据结构。<br>③ 在内存中生成一个代表该类的java.lang.Class对象（虽是对象，但是存在方法区中），作为方法区该类的访问入口。<br>注：数组类由jvm直接创建，但数组类中的元素仍要靠加载器。</p><p><a href="/posts/6d27f500/java_jvm_classload_1.png" data-fancybox="group" data-caption="类的生命周期" class="fancybox"><img alt="类的生命周期" zoom="70%" title="类的生命周期" data-src="/posts/6d27f500/java_jvm_classload_1.png" class="lazyload"></a></p><p>相对于类加载的其他阶段而言，<strong>加载阶段</strong>(准确地说，是加载阶段获取类的二进制字节流的动作)<strong>是可控性最强的阶段</strong>，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载</p><h3 id="二、验证：确保被加载的类的正确性"><a href="#二、验证：确保被加载的类的正确性" class="headerlink" title="二、验证：确保被加载的类的正确性"></a>二、验证：确保被加载的类的正确性</h3><p>连接阶段第一步，目的是确保class文件的字节流中所包含的信息符合虚拟机要求，并且不会危害虚拟机安全。</p><p>纯粹的java代码无法做到访问越界的数组元素、将一个对象转型为未实现类型、跳转到不存在的代码行等不安群行为，因为如果这些行为存在，编译器将拒绝将源码编译成class文件。<strong>但是</strong>，class文件不一定从源码编译过来，也可以直接编写class文件，所以验证还是很有<strong>必要</strong>的。（会抛出java.lang.VerifyError及其子类异常），可以通过<strong>-Xverify:none</strong>来<strong>关闭大部分类验证</strong>措施。</p><p>验证阶段完成<strong>4个阶段</strong>的检查动作：<strong>文件格式验证</strong>(魔数版号等)、<strong>元数据验证</strong>(语义分析：是否覆盖了不能覆盖的方法等)、<strong>字节码验证</strong>(程序语义：指令跳转不到非法区域或出栈数据和要求类型不一致)、<strong>符号引用验证</strong>(确保符号引用能找到对应的类)。</p><h4 id="1-文件格式验证"><a href="#1-文件格式验证" class="headerlink" title="1.文件格式验证"></a>1.文件格式验证</h4><p>验证字节流是否符合Class文件<strong>格式</strong>的规范，主要目的是<strong>保证输入的字节流能正确的解析</strong>，并存储于<strong>方法区</strong>，<strong>格式上符合</strong>描述一个java类型的<strong>要求</strong>。</p><p>该阶段验证点包括但<strong>不限于</strong>以下几点：<br>①是否以<strong>魔数</strong>0xCAFEBABE开头。<br>②主、次<strong>版本号</strong>是否在当前虚拟机处理范围内。<br>③<strong>常量池</strong>中是否有不被支持的类型（检查常量tag标志）。<br>④ 指向<strong>常量的索引</strong>是否指向不存在的常量或者不符合类型常量。</p><h4 id="2-元数据验证"><a href="#2-元数据验证" class="headerlink" title="2.元数据验证"></a>2.元数据验证</h4><p>对类的元数据信息进行<strong>语义校验</strong>，保证描述的<strong>信息符合</strong>java类型的<strong>要求</strong>。</p><p>该阶段验证包括但<strong>不限于</strong>：<br>① 是否有<strong>父类</strong>（除Object都有父类）<br>② 其父类是否<strong>继承</strong>了不允许继承的类（final类）<br>③ 若该类不是抽象类，是否<strong>实现了父类或者接口中要求的所有方法</strong><br>④ 类中的字段、方法是否<strong>与父类冲突</strong>（final字段、或错误重载）</p><h4 id="3-字节码分析"><a href="#3-字节码分析" class="headerlink" title="3. 字节码分析"></a>3. 字节码分析</h4><p>通过数据流和控制流分析，确定<strong>程序语义</strong>合法、符合逻辑。在元数据信息验证完成后，该阶段会对<strong>类的方法体</strong>进行验证，保证类的方法在运行时不会危害虚拟机。</p><h4 id="4-符号引用验证"><a href="#4-符号引用验证" class="headerlink" title="4. 符号引用验证"></a>4. 符号引用验证</h4><p>这步验证发生在虚拟机<strong>将符号引用转化为直接引用</strong>的时候（该转化发生在<strong>解析阶段</strong>）。</p><p>符号引用验证可以看作是对<strong>类自身以外的信息</strong>进行匹配性校验（常量池中的各种符号引用），目的为确保解析动作的正常执行。</p><p>符号引用就是用一组符号里描述所引用的目标，只要能准确的定位到所引用的目标，任何形式字面量都可以。<br>理解：在编译的时候每个java类都被编译成了class文件，在编译的时候虚拟机并不知道所引用类的地址，就用符号表示，而这个发生在解析阶段的这个转化过程就是将这个<strong>符号表示转化成真正的地址</strong>。</p><p>通常需要校验下列内容<strong>但不限于</strong>：<br>① 符号引用中通过字符串描述的<strong>全限定名</strong>是否能找到对应的类<br>② 在指定类中是否存在符合方法的<strong>字段描述</strong>，以及简单名称所描述的方法和字段<br>③ 符号引用中的类、字段、方法的<strong>访问性</strong>（pirvate、protected、public、default）是否可以被当前类访问</p><h3 id="三、准备：为类的静态变量分配内存，并将其初始化为默认值"><a href="#三、准备：为类的静态变量分配内存，并将其初始化为默认值" class="headerlink" title="三、准备：为类的静态变量分配内存，并将其初始化为默认值"></a>三、准备：为类的静态变量分配内存，并将其初始化为默认值</h3><p>为<strong>类变量</strong>在<strong>方法区</strong>中<strong>正式分配内存</strong>并设置<strong>类变量</strong>的初始值（通常为数据类型的0值，而不是程序员指定的值），<strong>注</strong>：这里进行内存分配的变量仅包括类变量（static），而不是实例变量（实例变量随实例分配在java堆中）。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span></span><br></pre></td></tr></table></figure></div><p><strong>通常情况下</strong>在准备阶段后value的初始值为0，不是123。给value赋值的putstatic指令编译后存放于<clinit()>中，在初始化阶段才会执行。</clinit()></p><p>也有<strong>例外</strong>，如果类字段的字段属性表中存在<strong>ConstantValue</strong>属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为<strong>ConstantValue</strong>属性所指定的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span></span><br></pre></td></tr></table></figure></div><p>假设上面的类变量value定义，<strong>编译</strong>时Javac将会为value生成ConstantValue属性，在<strong>准备</strong>阶段虚拟机就会根据ConstantValue的设置将value<strong>赋值</strong>为3。我们可以理解为<code>static final</code>常量在编译期就将其结果放入了调用它的类的常量池中。</p><h3 id="四、解析：符号引用替换为直接引用"><a href="#四、解析：符号引用替换为直接引用" class="headerlink" title="四、解析：符号引用替换为直接引用"></a>四、解析：符号引用替换为直接引用</h3><p>解析阶段是将常量池内的<strong>符号引用替换为直接引用</strong>的过程。</p><p>符号引用：正如在验证阶段所说的那样，符号引用可以是<strong>任何形式的字面量</strong>，且引用的目标<strong>不一定已经加载到内存</strong>。字面量形式有明确定义，所以在各种虚拟机中符号引用必须<strong>一致</strong>。</p><p>直接引用：直接指向目标的指针、相对偏移量、或者能间接定位目标的句柄，且目标已经<strong>存在于内存</strong>中。同一符号引用在不同虚拟机中转化得到的直接引用<strong>一般不同</strong>。</p><p>为避免解析动作重复执行，虚拟机会对第一次解析的结果进行缓存（invokedynamic指令除外），第一次成功或异常，后续的都会收到同样的结果。</p><p><strong>重点</strong>：解析阶段中，主要针对<strong>类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符</strong>7类符号引用进行解析。后3种需要动态语言支持，这里先概述前4种。</p><h4 id="1-类或接口的解析"><a href="#1-类或接口的解析" class="headerlink" title="1.类或接口的解析"></a>1.类或接口的解析</h4><p>当前类D对类或接口C的符号引用为N，需要转换成直接引用，需要三个步骤：</p><p>① 若C<strong>不是数组类型</strong>，虚拟机会把代表N的<strong>全限定名</strong>传递给D的类加载器去加载类C。在加载过程中，元数据和字节码验证的要求，有可能会触发其他<strong>相关类的加载</strong>动作，例如加载这个类的父类或者实现接口。</p><p>② 若C是一个<strong>数组类型</strong>，并且数组元素类型为<strong>对象</strong>，也就是N的描述符为[java/lang/Integer]的形式，那将会按照①加载数组元素的类型，即去加载类java.lang.Integer，接着由虚拟机生成一个代表此数组维度和元素的数组对象。</p><p>③ 若前两步没有异常，那么C在虚拟机中已经成为了一个有效的类或者接口了，但在解析完成之前需要进行符号引用验证，确认D是否具备对C的访问权限。若没权限，则抛出java.lang.IllegalAccessError异常。</p><h4 id="2-字段解析"><a href="#2-字段解析" class="headerlink" title="2.字段解析"></a>2.字段解析</h4><p>对于一个字段符号引用，首先会对字段所属的类或者接口的符号引用进行解析，解析成功后将这个字段所属的类或者接口用C表示。</p><h4 id="3-类方法解析"><a href="#3-类方法解析" class="headerlink" title="3. 类方法解析"></a>3. 类方法解析</h4><h4 id="4-接口方法解析"><a href="#4-接口方法解析" class="headerlink" title="4.接口方法解析"></a>4.接口方法解析</h4><h3 id="五、初始化：类的静态变量赋予正确的初始值"><a href="#五、初始化：类的静态变量赋予正确的初始值" class="headerlink" title="五、初始化：类的静态变量赋予正确的初始值"></a>五、初始化：类的静态变量赋予正确的初始值</h3><p>在Java中对类变量进行初始值设定有两种方式:</p><ul><li>声明类变量是指定初始值</li><li>使用静态代码块为类变量指定初始值</li></ul><p><strong>JVM初始化步骤</strong></p><ul><li>假如这个类还没有被加载和连接，则程序先加载并连接该类</li><li>假如该类的直接父类还没有被初始化，则<strong>先初始化其直接父类</strong></li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li></ul><p>下边的大概看看就行：</p><p>在初始化阶段才真正开始执行类中定义的java程序代码（或字节码）。</p><p>初始化阶段执行类构造器<strong><clinit()></clinit()></strong>方法的过程，<strong><clinit()></clinit()></strong>执行过程中的行为特点和细节如下：</p><p>① <strong><clinit()></clinit()></strong>是由编译器自动收集类中的所有变量的<strong>赋值动作</strong>和<strong>静态语句</strong>块中的语句合并而成。<strong>注</strong>：静态语句块只能访问在之前定义的变量，定在之后的变量只能赋值不能访问。</p><p>② <strong><clinit()></clinit()></strong>方法与类的构造函数不同，不需要显式的调用父类构造器，虚拟机会保证在子类的<strong><clinit()></clinit()></strong>之前，父类的<strong><clinit()></clinit()></strong>已经执行完成，因此虚拟机中第一个被执行的<strong><clinit()></clinit()></strong>方法是Object类。</p><p>③ 由于父类的<strong><clinit()></clinit()></strong>先执行，所以<strong>父类的静态语句优先级高于子类的变量赋值操作</strong>。</p><p>④ <strong><clinit()></clinit()></strong>不必须，若没有变量的<strong>赋值动作</strong>和<strong>静态语句</strong>块，则不会生成<strong><clinit()></clinit()></strong>方法。</p><p>⑤ 接口中没有静态语句块，但仍然你可以有变量初始化的赋值操作，但不同的是执行接口的<strong><clinit()></clinit()></strong>方法前不需要限制性父接口的<strong><clinit()></clinit()></strong>方法，只有用到父接口中的变量是才会执行。</p><p>⑥ <strong><clinit()></clinit()></strong>会加锁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类加载机制：虚拟机将描述类的数据从class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机可以直接使用的java类型。&lt;/p&gt;
&lt;p&gt;类从被加载都虚拟机内存中开始，到写在出内存为止，整个生命周期包括：&lt;strong&gt;加载&lt;/strong&gt;、&lt;str
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://jwkang99.github.io/tags/jvm/"/>
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>前缀和</title>
    <link href="https://jwkang99.github.io/posts/8628805.html"/>
    <id>https://jwkang99.github.io/posts/8628805.html</id>
    <published>2020-07-22T12:51:53.000Z</published>
    <updated>2020-07-22T13:55:42.153Z</updated>
    
    <content type="html"><![CDATA[<p>​        在计算某数据结构的中间部分的连续和的问题中，可以使用前缀和进行求解，例如<code>1-i</code>的前缀和与<code>1-j</code>的前缀和可以找出连续部分<code>i-j</code>的和，该方法同样使用与在树或者图结构中解决相应问题。</p><h4 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560. 和为K的子数组"></a>560. 和为K的子数组</h4><p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。<a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. 和为K的子数组</a></p><p>示例 1 :</p><p>输入:nums = [1,1,1], k = 2<br>输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//由于此处让计算的子数组个数，所以在此存储每种前缀和的个数</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; prefixSum = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    prefixSum.put(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        res += prefixSum.getOrDefault(sum-k,<span class="number">0</span>);</span><br><span class="line">        prefixSum.put(sum,prefixSum.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437.路径总和 III"></a>437.路径总和 III</h4><p>给定一个二叉树，它的每个结点都存放着一个整数值。</p><p>找出路径和等于给定数值的路径总数。</p><p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。<a href="https://leetcode-cn.com/problems/path-sum-iii/" target="_blank" rel="noopener">437. 路径总和 III</a></p><p><strong>分析</strong>：本题样可以使用前缀和进行计算。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存储本路径上前缀和信息</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; prefixSum = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        prefixSum.put(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        pathSumHelper(root,sum,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pathSumHelper</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum, <span class="keyword">int</span> curSum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curSum += root.val;</span><br><span class="line">        count += prefixSum.getOrDefault(curSum-sum,<span class="number">0</span>);</span><br><span class="line">        prefixSum.put(curSum,prefixSum.getOrDefault(curSum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        pathSumHelper(root.left,sum,curSum);</span><br><span class="line">        pathSumHelper(root.right,sum,curSum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> curCount = prefixSum.getOrDefault(curSum,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(curCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            prefixSum.put(curSum,curCount-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        curSum -= root.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        在计算某数据结构的中间部分的连续和的问题中，可以使用前缀和进行求解，例如&lt;code&gt;1-i&lt;/code&gt;的前缀和与&lt;code&gt;1-j&lt;/code&gt;的前缀和可以找出连续部分&lt;code&gt;i-j&lt;/code&gt;的和，该方法同样使用与在树或者图结构中解决相应问题。&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://jwkang99.github.io/categories/leetcode/"/>
    
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://jwkang99.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://jwkang99.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>volatile关键字</title>
    <link href="https://jwkang99.github.io/posts/111e02e0.html"/>
    <id>https://jwkang99.github.io/posts/111e02e0.html</id>
    <published>2020-07-22T03:20:15.000Z</published>
    <updated>2020-07-22T13:41:40.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><h4 id="防止指令重排"><a href="#防止指令重排" class="headerlink" title="防止指令重排"></a>防止指令重排</h4><p>在并发环境下，单例模式的实现方式最多的是使用Double Check的方式，代码如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton_6</span> </span>&#123;</span><br><span class="line">    <span class="comment">//volatile保证instance可见性，禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton_6 instance;</span><br><span class="line">    <span class="comment">//私有构造函数，禁止外部实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton_6</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//doube check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton_6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton_6<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton_6();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在上述代码中，new Singleton_6()实例的构造对象可以分为三个步骤：</p><ul><li>分配内存空间</li><li>初始化对象</li><li>将内存空间的地址赋值给对应的引用</li></ul><p>但是由于操作系统为了提高性能可以对指令进行重排序，所以这三个步骤的顺序可能会被打乱。</p><ul><li>分配内存空间</li><li>将内存空间的地址赋值给对应的引用</li><li>初始化对象</li></ul><p>如果是上述的流程，在多线程环境下，就有可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此为了防止这个过程的重排序，我们需要将变量设置为volatile类型的变量。</p><h4 id="实现可见性"><a href="#实现可见性" class="headerlink" title="实现可见性"></a>实现可见性</h4><p>可见性问题主要是指一个线程修改了共享变量值，但还没有写回到内存中，其他线程却看不到这个变化。如下图所示：</p><p><a href="/posts/111e02e0/volitale.png" data-fancybox="group" data-caption="image-20200301213039998" class="fancybox"><img alt="image-20200301213039998" title="image-20200301213039998" data-src="/posts/111e02e0/volitale.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; 0;  &#x2F;&#x2F;初始状态a &#x3D; b &#x3D; 0，结果允许x &#x3D; y &#x3D; 0出现</span><br><span class="line">b &#x3D; 0;</span><br><span class="line">a &#x3D; 1;  &#x2F;&#x2F;线程A</span><br><span class="line">x &#x3D; b;  &#x2F;&#x2F;线程A</span><br><span class="line">b &#x3D; 2;  &#x2F;&#x2F;线程B</span><br><span class="line">y &#x3D; a;  &#x2F;&#x2F;线程B</span><br></pre></td></tr></table></figure></div><p>这里线程 A 和线程 B 可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到 x = y = 0 的结果。</p><p>引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区——线程工作内存。volatile关键字能有效的解决这个问题，<code>volatile</code>变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取<code>volatile</code>类型的变量时总会返回最新写入的值。</p><h4 id="保证原子性"><a href="#保证原子性" class="headerlink" title="保证原子性"></a>保证原子性</h4><p>volatile关键字所保证的原子性是单次读写的原子性。<code>i++</code>是可以分为读写读三个步骤，<code>volatile</code>不能保证<code>i++</code>是原子操作，要保证<code>i++</code>是原子操作，可以使用原子类或者<code>Synchronized</code>。</p><p>同时，因为long和double两种数据类型的操作可分为高32位和低32位两部分，因此普通的long或double类型读/写可能不是原子的。因此，鼓励大家将共享的long和double变量设置为volatile类型，这样能保证任何情况下对long和double的单次读/写操作都具有原子性。</p><h3 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2.实现原理"></a>2.实现原理</h3><h4 id="可见性实现"><a href="#可见性实现" class="headerlink" title="可见性实现"></a>可见性实现</h4><blockquote><p>volatile变量的内存可见性是基于内存屏障（Memory Barrier）实现的</p></blockquote><p>内存屏障是一个CPU指令。<br>在程序运行时，为了提高性能，编译器和处理器会对指令进行重排序，JMM为了保证在不同的编译器和CPU上有相同的结果，通过插入特定类型的内存屏障来禁止特定类型的编译器重排序和处理器重排序，插入一条内存屏障会告诉编译器和CPU：不管什么指令都不能和这题奥Memory Barrier指令重排序。</p><p>如下代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过 hsdis 和 jitwatch 工具可以得到编译后的汇编代码:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">  0x0000000002951563: and    <span class="variable">$0xffffffffffffff87</span>,%rdi</span><br><span class="line">  0x0000000002951567: je     0x00000000029515f8</span><br><span class="line">  0x000000000295156d: <span class="built_in">test</span>   <span class="variable">$0x7</span>,%rdi</span><br><span class="line">  0x0000000002951574: jne    0x00000000029515bd</span><br><span class="line">  0x0000000002951576: <span class="built_in">test</span>   <span class="variable">$0x300</span>,%rdi</span><br><span class="line">  0x000000000295157d: jne    0x000000000295159c</span><br><span class="line">  0x000000000295157f: and    <span class="variable">$0x37f</span>,%rax</span><br><span class="line">  0x0000000002951586: mov    %rax,%rdi</span><br><span class="line">  0x0000000002951589: or     %r15,%rdi</span><br><span class="line">  //在 volatile 修饰的共享变量进行写操作的时候会多出 lock 前缀的指令</span><br><span class="line">  0x000000000295158c: lock cmpxchg %rdi,(%rdx)  </span><br><span class="line">  0x0000000002951591: jne    0x0000000002951a15</span><br><span class="line">  0x0000000002951597: jmpq   0x00000000029515f8</span><br><span class="line">  0x000000000295159c: mov    0x8(%rdx),%edi</span><br><span class="line">  0x000000000295159f: shl    <span class="variable">$0x3</span>,%rdi</span><br><span class="line">  0x00000000029515a3: mov    0xa8(%rdi),%rdi</span><br><span class="line">  0x00000000029515aa: or     %r15,%rdi</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div><p>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存(L1，L2 或其他)后再进行操作，但操作完不知道何时会写到内存。</p><p>lock 前缀的指令在多核处理器下会引发两件事情:</p><ul><li>将当前处理器缓存行的数据写回到系统内存。</li><li>写回内存的操作会使在其他 CPU 里缓存了该内存地址的数据无效。</li></ul><p>如果对声明了 volatile 的变量进行写操作，JVM 就会向处理器发送一条 lock 前缀的指令，将这个变量所在缓存行的数据写回到系统内存。</p><p>为了保证各个处理器的缓存是一致的，实现了缓存一致性协议(MESI)，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</p><p>所有多核处理器下还会完成：当处理器发现本地缓存失效后，就会从内存中重读该变量数据，即可以获取当前最新值。</p><p>volatile 变量通过这样的机制就使得每个线程都能获得该变量的最新值。</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p><strong>volatile 的 happens-before 关系</strong></p><p>happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</p><p><strong>volatile 禁止重排序</strong></p><p>为了性能优化，JMM 在不改变正确语义的前提下，会允许编译器和处理器对指令序列进行重排序。JMM 提供了内存屏障阻止这种重排序。</p><p>Java 编译器会在生成指令系列时在适当的位置会插入内存屏障指令来禁止特定类型的处理器重排序。</p><p>JMM 会针对编译器制定 volatile 重排序规则表。</p><p><a href="/posts/111e02e0/java-thread-x-key-volatile-2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="/posts/111e02e0/java-thread-x-key-volatile-2.png" class="lazyload"></a></p><p>为了实现 volatile 内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p><p>对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM 采取了保守的策略。</p><ul><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li></ul><p>volatile 写是在前面和后面分别插入内存屏障，而 volatile 读操作是在后面插入两个内存屏障。</p><p><a href="/posts/111e02e0/mb.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:50%;" data-src="/posts/111e02e0/mb.png" class="lazyload"></a></p><p><a href="/posts/111e02e0/java-thread-x-key-volatile-3.png" data-fancybox="group" data-caption="volitale" class="fancybox"><img alt="volitale" style="zoom:67%;" title="volitale" data-src="/posts/111e02e0/java-thread-x-key-volatile-3.png" class="lazyload"></a></p><p><a href="/posts/111e02e0/java-thread-x-key-volatile-4.png" data-fancybox="group" data-caption="volitale" class="fancybox"><img alt="volitale" style="zoom:67%;" title="volitale" data-src="/posts/111e02e0/java-thread-x-key-volatile-4.png" class="lazyload"></a></p><h3 id="3-适用场景"><a href="#3-适用场景" class="headerlink" title="3.适用场景"></a>3.适用场景</h3><ul><li>对变量的写操作不依赖于当前值。<ul><li>例如i++操作依赖于i本身</li></ul></li><li>该变量没有包含在具有其他变量的不变式中。<ul><li>由于不能保证原子性，vilatile变量不能保证不变式的成立。</li></ul></li><li>只有在状态真正独立于程序内其他内容时才能使用 volatile。</li></ul><p>参考<a href="https://www.pdai.tech/md/java/thread/java-thread-x-key-synchronized.html" target="_blank" rel="noopener">pdai博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;volatile&quot;&gt;&lt;a href=&quot;#volatile&quot; class=&quot;headerlink&quot; title=&quot;volatile&quot;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;h3 id=&quot;1-作用&quot;&gt;&lt;a href=&quot;#1-作用&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="https://jwkang99.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java集合框架</title>
    <link href="https://jwkang99.github.io/posts/1e4a4153.html"/>
    <id>https://jwkang99.github.io/posts/1e4a4153.html</id>
    <published>2020-07-22T02:31:23.000Z</published>
    <updated>2021-04-19T06:28:42.031Z</updated>
    
    <content type="html"><![CDATA[<p><strong>下图为java集合框架的中各种类的关系图</strong></p><p><a href="/posts/1e4a4153/java_collections_overview.png" data-fancybox="group" data-caption="Java容器类关系概览" class="fancybox"><img alt="Java容器类关系概览" title="Java容器类关系概览" data-src="/posts/1e4a4153/java_collections_overview.png" class="lazyload"></a></p><p>Java容器中只能放对象，对于基本类型（int、long、float、double等），需要将其包装成对象类型后（Integer、Long、Float、Double等）才能放到容器里。</p><blockquote><p>总的来说，java容器可以分为两类，第一类存储对象的集合，直接或间接实现Collection接口。第二类存储着键值对，依赖于Map接口或者Dictionary抽象类（此类已过时）。</p></blockquote><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1.Set"></a>1.Set</h3><p><strong>接口及抽象类概述</strong></p><p>AbstractSet抽象类<strong>继承</strong>AbstractCollection抽象类，<strong>实现</strong>Set接口。此类没有重写AbstractCollection中的任何实现，仅仅添加Set接口中的equals和hashCode的实现。</p><h4 id="①-HashSet"><a href="#①-HashSet" class="headerlink" title="① HashSet"></a>① HashSet</h4><p>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p><h4 id="②-LinkedHashSet"><a href="#②-LinkedHashSet" class="headerlink" title="② LinkedHashSet"></a>② LinkedHashSet</h4><p>具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p><h4 id="③-TreeSet"><a href="#③-TreeSet" class="headerlink" title="③ TreeSet"></a>③ TreeSet</h4><p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p><h3 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h3><p><strong>接口及抽象类概述</strong></p><p>Collection接口继承自Iterable接口。<br>List接口继承自Collection接口。<br>AbstractCollection抽象类实现了Collection接口（实现isEmpty等较通用的方法）。<br>AbstractList抽象类 继承自 AbstractCollection抽象类，实现List接口。<br>AbstractSequentialList抽象类 继承 自AbstractList抽象类，是List接口的简化版实现</p><h4 id="①-ArrayList"><a href="#①-ArrayList" class="headerlink" title="① ArrayList"></a>① ArrayList</h4><p>ArrayList<strong>继承</strong>AbstractList抽象类，<strong>实现</strong>List、RandomAccess、Cloneable、Serializable接口。ArrayList基于动态数组实现，支持随机访问。<a href="./ece885.html#一、ArrayList">源码分析</a></p><h4 id="②-Vector"><a href="#②-Vector" class="headerlink" title="② Vector"></a>② Vector</h4><p>Vector<strong>继承</strong>AbstractList抽象类，<strong>实现</strong>List、RandomAccess、Cloneable、Serializable接口。和 ArrayList 类似，但它是线程安全的（对容器操作的方法上都加了synchronized修饰）。<a href="./ece885.html#二、Vector">源码分析</a></p><h4 id="③-LinkedList"><a href="#③-LinkedList" class="headerlink" title="③ LinkedList"></a>③ LinkedList</h4><p>LinkedList<strong>继承</strong> AbstractSequentialList抽象类，<strong>实现</strong>List、Deque、Cloneable、Serializable接口。基于双向链表实现（既有prev也有next），只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。<a href="./ece885.html#四、LinkedList">源码分析</a></p><h3 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3.Queue"></a>3.Queue</h3><h4 id="①-LinkedList"><a href="#①-LinkedList" class="headerlink" title="① LinkedList"></a>① LinkedList</h4><p>可以用它来实现双向队列。</p><h4 id="②-PriorityQueue"><a href="#②-PriorityQueue" class="headerlink" title="② PriorityQueue"></a>② PriorityQueue</h4><p>基于堆结构实现，可以用它来实现优先队列。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="1-中间层抽象类和接口"><a href="#1-中间层抽象类和接口" class="headerlink" title="1.中间层抽象类和接口"></a>1.中间层抽象类和接口</h3><h4 id="①-AbstractMap抽象类"><a href="#①-AbstractMap抽象类" class="headerlink" title="① AbstractMap抽象类"></a>① AbstractMap抽象类</h4><p>在接口与实现类之间构建了一层抽象，其目的是为了复用一些比较通用的函数以及方便扩展，</p><p>AbstractMap 是<strong>继承</strong>于Map的抽象类，它实现了Map中的大部分API。其它Map的实现类可以通过继承AbstractMap来减少重复编码（例如返回Map.size方法，不必在每个实现类中去具体化）。</p><p>HashMap、TreeMap和WeakedHashMap均继承了AbstractMap。</p><h4 id="②-SortedMap接口"><a href="#②-SortedMap接口" class="headerlink" title="② SortedMap接口"></a>② SortedMap接口</h4><p>SortedMap是<strong>继承</strong>于Map的接口。SortedMap中的内容是<strong>排序的键值对</strong>，排序的方法是通过比较器(Comparator)，保持键值对有序的实现类，例如TreeMap，实现了该接口。</p><h4 id="③-NavigableMap接口"><a href="#③-NavigableMap接口" class="headerlink" title="③ NavigableMap接口"></a>③ NavigableMap接口</h4><p>NavigableMap<strong>继承</strong>SortedMap接口。相比于SortedMap，NavigableMap有一系列的导航方法；如”获取大于/等于某对象的键值对”、“获取小于/等于某对象的键值对”、“获取键值在某范围的子Map”（higher和ceiling等前缀的方法）。</p><h3 id="2-实现类"><a href="#2-实现类" class="headerlink" title="2.实现类"></a>2.实现类</h3><h4 id="①-HashMap"><a href="#①-HashMap" class="headerlink" title="① HashMap"></a>① HashMap</h4><p>HashMap<strong>继承</strong>AbstractMap抽象类，<strong>实现</strong>Map接口。基于哈希表实现。</p><h4 id="②-HashTable"><a href="#②-HashTable" class="headerlink" title="② HashTable"></a>② HashTable</h4><p>HashTable<strong>继承</strong>自Dictionary抽象类，<strong>实现</strong>Map接口。<br>和 HashMap 类似，但它是线程安全的（在所有方法都是加了synchronized关键字），这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p><h4 id="③-LinkedHashMap"><a href="#③-LinkedHashMap" class="headerlink" title="③ LinkedHashMap"></a>③ LinkedHashMap</h4><p>LinkedHashMap<strong>继承</strong>HashMap，<strong>实现</strong>Map接口。在原HashMap的基础上，改造每个Node（加了before和after），使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。</p><h4 id="④-TreeMap"><a href="#④-TreeMap" class="headerlink" title="④ TreeMap"></a>④ TreeMap</h4><p>TreeMap<strong>继承</strong>AbstractMap抽象类，<strong>实现</strong>NavigableMap接口。TreeMap存储的是有序键值对。基于红黑树实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;下图为java集合框架的中各种类的关系图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/posts/1e4a4153/java_collections_overview.png&quot; data-fancybox=&quot;group&quot; data-caption=&quot;
      
    
    </summary>
    
    
      <category term="java" scheme="https://jwkang99.github.io/categories/java/"/>
    
      <category term="基础知识" scheme="https://jwkang99.github.io/categories/java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="容器" scheme="https://jwkang99.github.io/categories/java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%AE%B9%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>312.戳气球</title>
    <link href="https://jwkang99.github.io/posts/88135758.html"/>
    <id>https://jwkang99.github.io/posts/88135758.html</id>
    <published>2020-07-19T02:00:00.000Z</published>
    <updated>2020-07-22T13:56:08.931Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><strong>题目描述</strong>：</h4><p>有 <code>n</code> 个气球，编号为<code>0</code> 到 <code>n-1</code>，每个气球上都标有一个数字，这些数字存在数组&nbsp;<code>nums</code>&nbsp;中。</p><p>现在要求你戳破所有的气球。如果你戳破气球 <code>i</code> ，就可以获得&nbsp;<code>nums[left] * nums[i] * nums[right]</code>&nbsp;个硬币。&nbsp;这里的&nbsp;<code>left</code>&nbsp;和&nbsp;<code>right</code>&nbsp;代表和&nbsp;<code>i</code>&nbsp;相邻的两个气球的序号。注意当你戳破了气球 <code>i</code> 后，气球&nbsp;<code>left</code>&nbsp;和气球&nbsp;<code>right</code>&nbsp;就变成了相邻的气球。</p><p>求所能获得硬币的最大数量。</p><p><strong>说明:</strong></p><ul>    <li>你可以假设&nbsp;<code>nums[-1] = nums[n] = 1</code>，但注意它们不是真实存在的所以并不能被戳破。</li>    <li>0 &le; <code>n</code> &le; 500, 0 &le; <code>nums[i]</code> &le; 100</li></ul><p><strong>示例:</strong></p><pre><strong>输入:</strong>[3,1,5,8]<strong>输出:</strong> 167 <strong>解释: </strong>nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []&nbsp;    coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167</pre><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><strong>分析</strong>：</h4><h5 id="方法一：区间动态规划"><a href="#方法一：区间动态规划" class="headerlink" title="方法一：区间动态规划"></a>方法一：区间动态规划</h5><p>​        之前做过一下区间动态规划得题目，例如回文串可以使用<code>dp[i][j]</code>表示区间<code>[i,j]</code>内得子串是否为回文串。类似得想法可以应用到本题中。</p><p>​        用二维数组<code>dp[i][j]</code>表示戳破区间<code>[i,j]</code>内的气球所得到的最大分数。但是要计算<code>dp[i][j]</code>依赖于区间内戳破气球的顺序，所以在区间内逐一戳破气球去最大值。</p><p>​        为了方便计算，减少不必要的判断，将原数组进行扩展，在两端加上值为<code>1</code>的元素，相当于有效数组的下标从<code>1</code>开始。二维数组<code>dp[i][j]</code>表示戳破下标在<code>[i,j]</code>内的气球所得到的硬币数。</p><p>​        <code>dp[i][j]</code>的计算可以根据区间<code>[i,j]</code>内的取值<code>k</code>为三部分：</p><ul><li>戳破<code>[i,k-1]</code>气球所得到的硬币数<code>dp[i][k-1]</code></li><li>戳破<code>k</code>气球所得到的硬币数</li><li>戳破<code>[k+1,j]</code>气球所得到的硬币数<code>dp[k+1][j]</code></li></ul><p>​       关键在于戳破<code>k</code>的时机，如果最先或者在中间戳破<code>k</code>则<code>dp[i][k-1]</code>和<code>dp[k+1][j]</code>则需重新计算，<code>dp</code>数组的有效性就出现了问题，因为之前计算的<code>dp[i][k-1]</code>是在左边的<code>k</code>仍存在的情况下得到的。因为这两者的值受<code>nums[k]</code>的影响，故而把戳破<code>k</code>的时机放在最后，仅重新计算戳破k得到的硬币即可。可得状态转移方程如下：</p><script type="math/tex; mode=display">dp[i][j] = dp[i][k-1] + dp[k+1][j] + coin(k)\\coin(k) = nums[i-1] * nums[k] * numx[j+1]</script><p>​        其中，<code>coin(k)</code>为重新计算戳破k得到的硬币数，即两边相邻部分都先被戳破的情况下，<code>coin(k)</code>依赖于<code>i-1</code>和<code>j+1</code>。注意：此处不能使用<code>dp[k][k]</code>，因为<code>dp[k][k]</code>表示的是完整数组的情况下戳破k得到的硬币数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//区间动态规划</span></span><br><span class="line">    <span class="keyword">if</span> ( nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">int</span>[] helper = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">2</span>];</span><br><span class="line">    helper[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    helper[len+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//扩展原数组，在两端加1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        helper[i+<span class="number">1</span>] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//dp[i][j] 表示在戳破[i,j]所有气球能获得得最多硬币数  </span></span><br><span class="line">    <span class="comment">//初始化为len+2*len+2方便下边计算，保证不会越界，减少判断</span></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">2</span>][len+<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//此处需要从尾部开始计算，因为状态dp[i][j]与左边和下边的状态有关</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = len; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;=len; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class="line">                <span class="comment">//此处表示最后把区间内的k戳破所得到得硬币</span></span><br><span class="line">                <span class="keyword">int</span> kCoin = dp[i][k-<span class="number">1</span>] + dp[k+<span class="number">1</span>][j] + helper[i-<span class="number">1</span>]*helper[k]*helper[j+<span class="number">1</span>];</span><br><span class="line">                dp[i][j] = Math.max(kCoin,dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>][len];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="方法二：回溯记忆化搜索"><a href="#方法二：回溯记忆化搜索" class="headerlink" title="方法二：回溯记忆化搜索"></a>方法二：回溯记忆化搜索</h5><p>​        基本思路和上边的动态规划基本一致，只不过采用回溯的方式，当时会有大量的重复计算，所以需要将之前计算的结果存储下来。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] helper;</span><br><span class="line">    <span class="keyword">int</span>[][] dp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//区间动态规划</span></span><br><span class="line">        <span class="keyword">if</span> ( nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        helper = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">2</span>];</span><br><span class="line">         dp = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">2</span>][len+<span class="number">2</span>];</span><br><span class="line">        helper[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        helper[len+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            helper[i+<span class="number">1</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search(<span class="number">1</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[left][right]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[left][right];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt;= right; k++) &#123;</span><br><span class="line">            <span class="comment">//此处表示最后把区间内的k戳破所得到得硬币</span></span><br><span class="line">            <span class="keyword">int</span> kCoin = search(left,k-<span class="number">1</span>)+ search(k+<span class="number">1</span>,right) + helper[left-<span class="number">1</span>]*helper[k]*helper[right+<span class="number">1</span>];</span><br><span class="line">            dp[left][right] = Math.max(kCoin,dp[left][right]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[left][right];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;：&lt;/h4&gt;&lt;p&gt;有 &lt;code&gt;n&lt;/code&gt; 个气球，编号为&lt;code&gt;0&lt;/code&gt; 到 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://jwkang99.github.io/categories/leetcode/"/>
    
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://jwkang99.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://jwkang99.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>785.判断二分图</title>
    <link href="https://jwkang99.github.io/posts/dc82b054.html"/>
    <id>https://jwkang99.github.io/posts/dc82b054.html</id>
    <published>2020-07-16T02:02:48.000Z</published>
    <updated>2020-07-19T04:57:01.070Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><strong>题目描述</strong>：</h4><p>给定一个无向图<code>graph</code>，当这个图为二分图时返回<code>true</code>。</p><p>如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。</p><p><code>graph</code>将会以邻接表方式给出，<code>graph[i]</code>表示图中与节点<code>i</code>相连的所有节点。每个节点都是一个在<code>0</code>到<code>graph.length-1</code>之间的整数。这图中没有自环和平行边：&nbsp;<code>graph[i]</code>&nbsp;中不存在<code>i</code>，并且<code>graph[i]</code>中没有重复的值。</p><p>示例 1:</p><blockquote><p>输入:[[1,3], [0,2], [1,3], [0,2]]<br>输出:true<br>解释:<br>无向图如下:<br>0——1<br>|    |<br>|    |<br>3——2<br>我们可以将节点分成两组: {0, 2} 和 {1, 3}。</p></blockquote><p>示例 2</p><blockquote><p>输入:[[1,2,3], [0,2], [0,1,3], [0,2]]<br>输出:false<br>解释:<br>无向图如下:<br>0——1<br>| \  |<br>|  \ |<br>3——2<br>我们不能将节点分割成两个独立的子集。</p></blockquote><p><strong>注意:</strong></p><ul>   <li><code>graph</code> 的长度范围为 <code>[1, 100]</code>。</li>   <li><code>graph[i]</code> 中的元素的范围为 <code>[0, graph.length - 1]</code>。</li>   <li><code>graph[i]</code> 不会包含 <code>i</code> 或者有重复的值。</li>   <li>图是无向的: 如果<code>j</code> 在 <code>graph[i]</code>里边, 那么 <code>i</code> 也会在 <code>graph[j]</code>里边。</li></ul><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><strong>分析</strong>：</h4><p>​    显而易见该题需要搜索整个数组，进行判断是否存在两个相邻的节点属于同一类别。可以使用各种搜索算法给每个节点赋予标记表示其所属类别，也可以使用并查集进行解决。</p><h5 id="方法一：DFS"><a href="#方法一：DFS" class="headerlink" title="方法一：DFS"></a>方法一：DFS</h5><p>​    用一个<code>state</code>数组，对每个节点进行标记，其中</p><ul><li>-1表示该节点还未被访问</li><li>0表示该节点归为0类</li><li>1表示该节点归为1类</li></ul><p><strong>算法步骤：</strong></p><p>​    从任意一个未访问的节点开始，采用深度优先遍历，对每次遍历到的节点进行分类：</p><ul><li>若该节点未被访问，则根据该节点的源节点的标记更新标记。若上一节点标记为0，则当前节点标记为1，否则为0。</li><li>若该节点被访问过，即<code>state[cur]!=-1</code><ul><li>若<code>state[cur]</code>与上一节点的标记一致，则说明该图不符合二部图规则。</li><li>若不一致继续递归即可。</li></ul></li></ul><p>事件复杂度</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isTrue = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] state = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">        Arrays.fill(state,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(state[i] != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//每次在此处进入dfs，必定为一个新的连通子图</span></span><br><span class="line">                <span class="comment">//与上一此在此处调用dfs的节点之间不存在边</span></span><br><span class="line">                <span class="comment">//所以可以放心的把前一节点的分类标记置为0</span></span><br><span class="line">                dfsHelper(graph,state,i,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dfs函数用于判断当前节cur属于哪一类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state 表示节点状态的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cur 当前节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preFlag 前一节点的状态，必为0或1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] state,<span class="keyword">int</span> cur,<span class="keyword">int</span> preFlag)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果已经存在两个相邻节点属于同一类，则停止递归</span></span><br><span class="line">        <span class="keyword">if</span>(!isTrue)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若该节点没有被访问</span></span><br><span class="line">        <span class="keyword">if</span>(state[cur] == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//则根据前一节点的状态值更新当前状态</span></span><br><span class="line">            <span class="comment">//若上一节点标记为0，则当前节点标记为1</span></span><br><span class="line">            <span class="comment">//若上一节点标记为1，则当前节点标记为0</span></span><br><span class="line">            state[cur] = <span class="number">1</span> - preFlag;</span><br><span class="line">            <span class="comment">//与cur节点相连的点集合</span></span><br><span class="line">            <span class="keyword">int</span>[] nears = graph[cur];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nears.length;i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> next = graph[cur][i];</span><br><span class="line">                <span class="comment">//逐一访问与cur节点相邻的节点，并初始化state值</span></span><br><span class="line">                dfsHelper(graph, state, next, <span class="number">1</span> - preFlag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state[cur] == preFlag)&#123;</span><br><span class="line">            <span class="comment">//若该节点已经被访问过，即已赋予状态值</span></span><br><span class="line">            <span class="comment">//且与前一相邻节点状态一致则违反二部图规则</span></span><br><span class="line">            isTrue = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="方法二：BFS"><a href="#方法二：BFS" class="headerlink" title="方法二：BFS"></a>方法二：BFS</h5><p>​    用一个<code>state</code>数组，对每个节点进行标记，其中</p><ul><li>-1表示该节点还未被访问</li><li>0表示该节点归为0类</li><li>1表示该节点归为1类</li></ul><p><strong>算法步骤：</strong></p><ul><li>对每一个连通域的起始节点赋予分类标记<code>0</code>，然后入队</li><li>出队节点<code>cur</code>，对于广度优先遍历到该节点的每一相邻节点<ul><li>如果未被访问过，则标记该节点为<code>1-state[cur]</code>，然后入队该节点</li><li>若访问过，则对比是否跟<code>cur</code>是同一类，若是则返回<code>false</code>，否则继续循环</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] state = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">    Arrays.fill(state,-<span class="number">1</span>);</span><br><span class="line">    Deque&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(state[i] == -<span class="number">1</span>)&#123;</span><br><span class="line">            queue.offer(i);</span><br><span class="line">            state[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">int</span> cur = queue.poll();</span><br><span class="line">                <span class="keyword">int</span> curFlag = state[cur];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> next : graph[cur]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(state[next] == curFlag)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(state[next] == -<span class="number">1</span>)&#123;</span><br><span class="line">                        state[next] = <span class="number">1</span> - curFlag;</span><br><span class="line">                        queue.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="方法二：并查集"><a href="#方法二：并查集" class="headerlink" title="方法二：并查集"></a>方法二：并查集</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        UnionSet unionSet = <span class="keyword">new</span> UnionSet(graph.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] neighbors = graph[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> neighbor : neighbors)&#123;</span><br><span class="line">                <span class="keyword">if</span>(unionSet.inOneSet(i,neighbor))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                unionSet.union(neighbors[<span class="number">0</span>],neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionSet</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] roots;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionSet</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">            roots = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                roots[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(roots[p] == p)&#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若p不是根，更新root[p]的值</span></span><br><span class="line">            roots[p] = findRoot(roots[p]);</span><br><span class="line">            <span class="keyword">return</span> roots[p];</span><br><span class="line">            <span class="comment">//也可每次查找都一级一级往上找根</span></span><br><span class="line">            <span class="keyword">return</span> findRoot(roots[p]);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">inOneSet</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> findRoot(p) == findRoot(q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">            roots[findRoot(q)] = roots[findRoot(p)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;：&lt;/h4&gt;&lt;p&gt;给定一个无向图&lt;code&gt;graph&lt;/code&gt;，当这个图为二分图时返回&lt;cod
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://jwkang99.github.io/categories/leetcode/"/>
    
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://jwkang99.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://jwkang99.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>315.计算右侧小于当前元素的个数</title>
    <link href="https://jwkang99.github.io/posts/cabc759b.html"/>
    <id>https://jwkang99.github.io/posts/cabc759b.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-19T04:57:57.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="315-计算右侧小于当前元素的个数"><a href="#315-计算右侧小于当前元素的个数" class="headerlink" title="315.计算右侧小于当前元素的个数"></a>315.计算右侧小于当前元素的个数</h2><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><strong>题目描述</strong>：</h4><p>给定一个整数数组 <em>nums</em>，按要求返回一个新数组&nbsp;<em>counts</em>。数组 <em>counts</em> 有该性质： <code>counts[i]</code> 的值是&nbsp; <code>nums[i]</code> 右侧小于&nbsp;<code>nums[i]</code> 的元素的数量。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> [5,2,6,1]<strong>输出:</strong> [2,1,1,0] <strong>解释:</strong>5 的右侧有 <strong>2 </strong>个更小的元素 (2 和 1).2 的右侧仅有 <strong>1 </strong>个更小的元素 (1).6 的右侧有 <strong>1 </strong>个更小的元素 (1).1 的右侧有 <strong>0 </strong>个更小的元素.</pre><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><strong>分析</strong>：</h4><h5 id="方法一：归并排序-索引数组"><a href="#方法一：归并排序-索引数组" class="headerlink" title="方法一：归并排序+索引数组"></a>方法一：归并排序+索引数组</h5><p>该题和计算逆序数个方法类似，利用归并排序可以快速统计出两段有序数组中的逆序数。由于题目中要求我们要具体计算到元素级别。“归并排序” 完成以后，原始数组的位置就已经变化了，因此可以使用索引数组定位元素是关键。<strong>“原始数组” 不变，用于比较两个元素的大小，真正位置变换的是 “索引数组”</strong>。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] counts;</span><br><span class="line">    <span class="comment">//存储下标</span></span><br><span class="line">    <span class="keyword">int</span>[] indices;</span><br><span class="line">    <span class="comment">//归并排序辅助数组</span></span><br><span class="line">    <span class="keyword">int</span>[] temp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">countSmaller</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        counts = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        indices = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        temp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="comment">///存储数组下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            indices[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        merge(nums,<span class="number">0</span>,len-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : counts)&#123;</span><br><span class="line">            res.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//归并降序排序</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">        merge(nums,left,mid);</span><br><span class="line">        merge(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">        mergeSort(nums,left,mid,right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt;= right; i++)&#123;</span><br><span class="line">            temp[i] = indices[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = left , j = mid + <span class="number">1</span>, k = left;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[temp[i]] &gt; nums[temp[j]])&#123;</span><br><span class="line">                <span class="comment">//[9,6,5 | 4,1,0]</span></span><br><span class="line">                <span class="comment">// i       j</span></span><br><span class="line">                <span class="comment">//i和j构成逆序，则j之后也为逆序，直接相加</span></span><br><span class="line">                counts[temp[i]] += (right - j + <span class="number">1</span>);</span><br><span class="line">                indices[k++] = temp[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                indices[k++] = temp[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            indices[k++] = temp[i++];;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=right)&#123;</span><br><span class="line">            indices[k++] = temp[j++];;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="方法二：树状数组"><a href="#方法二：树状数组" class="headerlink" title="方法二：树状数组"></a>方法二：树状数组</h5><p>需要学习一下再来补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;315-计算右侧小于当前元素的个数&quot;&gt;&lt;a href=&quot;#315-计算右侧小于当前元素的个数&quot; class=&quot;headerlink&quot; title=&quot;315.计算右侧小于当前元素的个数&quot;&gt;&lt;/a&gt;315.计算右侧小于当前元素的个数&lt;/h2&gt;&lt;h4 id=&quot;题目描述：
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://jwkang99.github.io/categories/leetcode/"/>
    
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://jwkang99.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://jwkang99.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="https://jwkang99.github.io/posts/52ba89f4.html"/>
    <id>https://jwkang99.github.io/posts/52ba89f4.html</id>
    <published>2020-07-10T09:10:36.725Z</published>
    <updated>2020-03-06T13:29:06.703Z</updated>
    
    <content type="html"><![CDATA[<p>﻿#  1. IOC（控制反转，Inversion of Control）</p><p>IOC：把创建对象的权力交给框架，是框架的重要特征，包括依赖注入和依赖查找。可降低类之间的耦合度。如果自己写代码，可以简单地通过工厂创建对象，若为单例可以将在初始化工厂时将对象放入容器中，再根据类名取单例对象。<br>之前一个类内部需要创建另外一个类的对象时，自己在类内部通过new或者反射的方式创建一个对象，直通通过工厂或者框架创建，我理解的这就是控制反转吧。</p><h1 id="2-使用Spring的ioc解决程序耦合问题"><a href="#2-使用Spring的ioc解决程序耦合问题" class="headerlink" title="2. 使用Spring的ioc解决程序耦合问题"></a>2. 使用Spring的ioc解决程序耦合问题</h1><p>把对象的创建交给spring管理<br>获取spring的IOC核心容器，并根据id获取对象<br>例：通过ApplicationContext获取核心容器。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XmlName为配置文件的名称，如Bean.xml</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(XmlName);</span><br><span class="line"><span class="comment">//BeanName为xml文件中配置的类的名称</span></span><br><span class="line">Object ocj = ac.getBean(BeanName);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="Service" class="com.service.impl.ServiceImpl"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></div><h2 id="2-1-ApplicationContext的三个常用实现类"><a href="#2-1-ApplicationContext的三个常用实现类" class="headerlink" title="2.1 ApplicationContext的三个常用实现类"></a>2.1 ApplicationContext的三个常用实现类</h2><ol><li>ClassPathXmlApplicationContext:<br>加载类路径下的配置文件，要求配置文件必须在类路径下。</li><li>FileSystemApplicationContext:<br>加载磁盘任意路径下的配置文件(必须有访问权限)</li><li>AnnotationConfigApplicationContext:<br>用于读取注解创建文件<h2 id="2-2-创建核心容器的两个接口的不同"><a href="#2-2-创建核心容器的两个接口的不同" class="headerlink" title="2.2 创建核心容器的两个接口的不同"></a>2.2 创建核心容器的两个接口的不同</h2>创建容器有两个接口：ApplicationContext和BeanFactory，其中BeanFactory是ApplicationContext的子接口。</li></ol><p>ApplicationContext：<br>适用于<strong>单例对象</strong>。ApplicationContext在创建核心容器时，创建对象采取的策略是立即加载的方式，即只要读取完配置文件，马上通过反射的方式创建配置文件中的对象，并加入到核心容器中。因其是底层接口，更多的采用此接口定义容器对象。<br>在上例代码中，可以在ServiceImpl的默认构造函数中输出一句话，在读取配置文件的那一行打断点，即可发现在配置文件读取完毕后，配置文件中相应的对象都已经加载完毕。</p><p>BeanFactory:<br>适用于<strong>多例对象</strong>。BeanFactory在创建核心容器时，创建对象采取的策略是延时加载的方式，运行到根据id查找对象时，即如下代码，才真正的创建对象并把对象方入容器。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object ocj = ac.getBean(BeanName);</span><br></pre></td></tr></table></figure></div><h2 id="2-3-Spring对Bean的管理细节"><a href="#2-3-Spring对Bean的管理细节" class="headerlink" title="2.3 Spring对Bean的管理细节"></a>2.3 Spring对Bean的管理细节</h2><p>(1).创建Bean的三种方式<br>①  使用默认构造函数创建：在spring配置文件中使用bean标签，配以id和class(全限定类名)属性之后，且没有其他属性和标签时，采用的就是默认构造函数创建bean对象。若没有默认构造函数则对象无法创建。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认构造函数创建对象xml文件示例</span></span><br><span class="line">&lt;bean id="Service" class="com.service.impl.ServiceImpl"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="Dao" class="com.dao.impl.DaoImpl"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></div></p><p>② 使用普通工厂类中的方法创建对象，即使用某个类(工厂类)中的方法创建对象，并存入spring容器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先创建一个普通工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IService <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>factory-bean用于指定创建该对象的工厂类id，factory-method用于指定创建该bean对象的方法。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--xml配置文件中的实现如下--&gt;</span><br><span class="line">&lt;bean id="instanceFactory" class="com.factory.InstanceFactory"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="Service" factory-bean="instanceFactory" factory-method="getService"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></div></p><p>③使用静态工厂中的静态方法创建对象(使用某个类中的静态方法创建对象并存入spring)<br>静态工厂类：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IService <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>配置文件：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="Service" class="com.factory.StaticFactory" factory-method="getService"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></div><br>(2).bean的作用范围调整<br>spring创建的对象默认就是单例的，通过bean中的scope属性调整<br><strong>scope</strong>：</p><ol><li>singleton单例</li><li>prototype多例</li><li>request：作用于web应用的请求范围</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围(全局会话范围)，当不是集群环境是，它就是session</li></ol><p>(3).bean对象的生命周期<br>单例对象<br>    出生：当容器创建时对象出生，即之前的ApplicationContext<br>    活着：只要容器还在，对象一致活着<br>    死亡：容器销毁，对象消亡<br>多例对象<br>出生：当使用对象时spring框架为我们创建，即之前说的BeanFactory<br>    活着：对象只要在使用过程中就一致活着<br>    死亡：当对象长时间不用，且没有别的对象引用时，有java的GC回收<br>    可在标签中指定初始方法init-method和销毁方法destroy观察</p><p>(4).spring中的依赖注入<br>依赖注入：Dependency Injection<br>IOC作用：降低程序间的耦合(依赖关系)<br>依赖关系的管理：以后都交给了Spring来维护，在当前类需要用到其他类的对象时，由spring为我们提供，我们只需要在配置文件中说明<br>依赖关系的维护就称之为依赖注入</p><p>依赖注入<br>能注入的数据，有三类<br>①    基本数据类型和String<br>②    其他bean类型(在配置文件中或者注解配置过的bean)<br>③    复杂类型/集合类型</p><p>注入的方式，有三种<br>①    使用构造函数提供<br>在bean标签内部使用constructor-arg标签，标签中的属性<br><em>type</em>：用于指定要注入的数据类型，该数据类型也是构造函数中某个或某些参数的类型<br><em>index</em>：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，从0开始<br><em>name</em>：用于指定给构造函数中指定名称的参数赋值  ，常用<br>以上三个用于指定构造函数中哪个参数赋值<br><em>value</em>：用于提供基本类型和String类型数据<br>ref：用于提供其他bean类型，如下指的就是在spring的ioc核心容器中出现过的bean对象date</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"Service"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.service.impl.ServiceImpl"</span>&gt;</span><br><span class="line">    &lt;constructor-arg name="name" value="kang"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg name="age" value="19"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg name="birthday" ref="now"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></div><p>注：对应类中必须有对应的有相同参数的构造方法</p><p>构造函数注入方式分析：<br>    <em>优势</em>：在获取bean对象时，注入数据时必须的操作，否则对象无法创建成功，如果某些类只想提供某些参数创建对象时比其他方式更简单。<br>    <em>弊端</em>：改变了bean对象的实例化方式，即使用不到这些数据也必须提供<br>②    使用set方法提供 更常用<br>在bean标签内部使用property标签，标签中的属性有：<br>name:用于指定注入时所调用的set方法名称<br>value:用于提供基本类型和String类型数据<br>ref:用于提供其他bean类型，指的就是在spring的ioc核心容器中出现过的bean对象<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"Service"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.service.impl.ServiceImpl"</span>&gt;</span><br><span class="line"><span class="comment">//对应实体类中必须有相应属性的set方法</span></span><br><span class="line">   &lt;property name="name" value="kang"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="age" value="19"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="birthday" ref="now"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></div></p><p>set方法<br>优势：创建对象没有明确限制，可以直接使用默认构造函数<br>弊端：如果有某个成员必须有值，无法保证一定注入，有可能没有set方法，则获取对象是有可能set方法没有执行</p><p><strong>当类中有集合类型的属性时</strong>，set方法注入时结构相同标签可以互换<br>总体上分为两种标签<br>map类标签：map和property<br>array类标签：array、list和set</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"accountService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.service.impl.AccountServiceImpl"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"myStr"</span> &gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;value&gt;aaa&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;bbb&lt;/value&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"myList"</span> &gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;aaa&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;bbb&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"myMap"</span> &gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">            &lt;entry key=<span class="string">"1"</span>&gt;</span><br><span class="line">                &lt;value&gt;aa&lt;/value&gt;</span><br><span class="line">            &lt;/entry&gt;</span><br><span class="line">            &lt;entry key="2" value="bb"&gt;&lt;/entry&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"myProps"</span>&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;prop key="3"&gt;cc&lt;/prop&gt;</span><br><span class="line">        &lt;/props&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></div><p>③    使用注解提供<br>注：如果是经常变化的数据，并不使用于注入的方式，因为单例只有一个对象，属性永远不能变。</p><h2 id="3-基于注解的IOC配置"><a href="#3-基于注解的IOC配置" class="headerlink" title="3 基于注解的IOC配置"></a>3 基于注解的IOC配置</h2><p>以下为用xml配置文件实现的创建bean对象的基本方式<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"Service"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.service.impl.ServiceImpl"</span> scope=<span class="string">"singleton"</span> init-method=<span class="string">""</span> destroy-method=<span class="string">""</span>&gt;</span><br><span class="line"><span class="comment">//对应实体类中必须有相应属性的set方法</span></span><br><span class="line">   &lt;property name="name" value="kang"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="age" value="19"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="birthday" ref="now"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></div><br>spring中作用于bean对象的各个注解对应于上边xml中各个部分实现的功能大体一致。要想通过使用注解的方式创建对象，就要修改xml配置文件中的相关配置。告知spring在创建容器时要扫描context名称空间和约束，而不是去扫描配置文件中的bean标签。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"GBK"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在bean的约束中，而在一个名称为context名称空间和约束中--&gt;</span><br><span class="line">     &lt;!--会扫描所有位于com包下的类和接口上的注解--&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com"&gt;&lt;/context:component-scan&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></div><br>用注解的方式创建bean对象中的相关注解大概有这么几类</p><ol><li>用于创建对象的：作用就和在xml配置文件中的bean标签一样<br> @Component(value=name)<br> 作用：放在加载类定义的前一行，用于把当前类对象存入spring容器中。<br> 属性：value用于指定bean的id。可省略，默认值时当前类名，且首字母改小写。<br> 以下三个注解的作用和属性与@Component基本一致<br> 这三个注解分别时spring框架为我们提供明确的三层使用的注解，是我们的三层对象更加清晰。<br> @Controller：一般用于表现层<br> @Service：一般用于业务层<br> @Repository：一般用于持久层</li></ol><p>下面代码将类型为DaoImpl 的对象放入到Spring的ioc核心容器中，其中key为注解中的值Dao，value为DaoImpl类型的对象，下边两个类都可以看做时IDao类型<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"Dao1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl1</span> <span class="keyword">implements</span> <span class="title">IDao</span> </span>&#123;&#125;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"Dao2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl2</span> <span class="keyword">implements</span> <span class="title">IDao</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></div></p><ol><li><p>用于注入数据的：作用就和在xml配置文件中的bean标签中写一个property标签时一样的<br> @Autowired<br> 作用：自动按照类型注入。只要容器(key,value)中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功。如果ioc容器中没有和要注入变量类型一致的对象时，则报错。如果ioc容器中有多个类型匹配时，首先按照类型(value)找出匹配的对象，然后再按照变量名称(key)查找一致的对象<br> 位置：可在方法上，也可在变量上。<br> 细节：在使用注解注入时，set方法就不是必要的了。</p><p> 如下面代码，在ioc核心容器执行了getBean(“Service”)时，当执行有关dao属性的方法时，就会自动的从容器中寻找IDao类型的对象，若容器中只有一个直接注入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"Service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDao dao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>@Qualifier<br>    作用：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用，但是在给方法参数注入时可以。<br>    属性：value，用于指定bean的注入的id<br>    注：不能独立使用，只能和@Autowired配合使用<br>    下例中中，ioc容器中有两个IDao类型的对象，用Qualifier注解指定属性自动注入的Bean的id<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"Service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"Dao1"</span>)</span><br><span class="line">    <span class="keyword">private</span> IDao dao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"Dao1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl1</span> <span class="keyword">implements</span> <span class="title">IDao</span> </span>&#123;&#125;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"Dao2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl2</span> <span class="keyword">implements</span> <span class="title">IDao</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></div><br>@Resource<br>作用：直接按照bean的id(key)注入<br>属性：name，用于指定bean的id</p><p><strong>注意：</strong>@Autowired、@Qulifier和@Resource三个注解只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。另外，集合类型的注入只能通过XML来实现。</p><p>@Value<br>作用：用于注入基本类型和String类型的数据<br>属性：用于指定数据的值。可以使用spring中的SpEL（Spring中的el表达式）<br>           SpEL写法：${表达式}</p><ol><li><p>用于改变作用范围的：作用和在bean标签中的scope属性是一样的<br> @Scope<br> 作用：用于指定bean的作用范围<br> 属性：value，指定取值范围。常用取值：singleton和prototype，默认为singleton</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在上边默认的情况下，为单例，as和as2指向的同一个对象</span></span><br><span class="line">IService as = (IService) ac.getBean(<span class="string">"Service"</span>);</span><br><span class="line">IService as2 = (IService) ac.getBean(<span class="string">"Service"</span>);</span><br><span class="line">System.out.println(as==as2);  <span class="comment">//true</span></span><br><span class="line"><span class="comment">//若改为以下代码</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"Service"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"Dao1"</span>)</span><br><span class="line">    <span class="keyword">private</span> IDao dao;</span><br><span class="line">&#125;</span><br><span class="line">IService as = (IService) ac.getBean(<span class="string">"Service"</span>);</span><br><span class="line">IService as2 = (IService) ac.getBean(<span class="string">"Service"</span>);</span><br><span class="line">System.out.println(as==as2);  <span class="comment">//false,但as和as2中的dao仍为一个对象</span></span><br></pre></td></tr></table></figure></div></li><li><p>和生命周期相关：和bean标签中init-method和destroy-method一样<br> @ProDestroy<br> 作用：用于指定销毁方法，单例对象随容器关闭销毁，容器不负责多例对象，由GC回收<br> @PostConstruct<br> 作用：用于指定初始化方法</p></li><li><p>在使用注解创建和注入自定义的类时比较方便，由于所导入的jar包无法在其类头部加上@Service的注解，并且需要指定创建ioc容器时需要扫描的包，故只能在xml文件中定义bean标签将其放入ioc容器中。为了进一步实现没有xml的基于注解的ioc配置，引入一个新的注解<br> @Configuration<br> 作用：指定当前类是一个配置类</p><p> @ComponentScan(value=packageName)<br> 作用：用于通过注解指定spring在创建容器时要扫描的包<br> 属性：value和basePackages的作用一样<br> 注意：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写。<br> 使用此注解作用相当于xml中context:component-scan标签</p><p> @Bean<br> 作用：用于吧当前方法的返回值作为bean对象存入spring的ioc容器中<br> 属性：用于指定bean的id，默认值为当前方法的名称<br> 注意：当用注解配置方法时，如果方法有参数，spring框架回去容器中查找有没有可用的bean对象，查找方式和Autowired一样。</p><p> @Import<br> 作用：用于导入其他的配置类<br> 属性：value用于指定其他配置类的字节码<br> 注意：当我们使用Import注解之后，有Import注解的为父配置类，而导入的都是子配置类</p><p> @PropertySource<br> 作用：用于指定properties文件的位置<br> 属性：value用于指定文件的名称和路径<br> 关键字：classpath表示类路径下</p></li></ol><p>思考：Spring为什么要整合junit，怎么整合。</p><h1 id="3-AOP"><a href="#3-AOP" class="headerlink" title="3.AOP"></a>3.AOP</h1><blockquote><p>AOP(Aspect Oriented Programming)：面向切面编程<br>通过预编译的方式和运行期静态代理实现程序功能的统一维护的一种技术.AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br>                     —摘自百度百科                            </p></blockquote><p>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用倒台代理的技术，在不修改源码的基础上，对我们的已有方法进行增强。<br>优势：减少重复代码，提高开发效率，维护方便<br>Spring中的AOP通过配置的方式实现动态代理。</p><h2 id="3-1-AOP相关术语："><a href="#3-1-AOP相关术语：" class="headerlink" title="3.1 AOP相关术语："></a>3.1 AOP相关术语：</h2><p><strong>Joinpoint</strong>：连接点，是指那些被拦截到的点。在Spring中，这些点只支持方法。<br><strong>Pointcut</strong>：切入点，只的是我们要对那些Joinpoint进行拦截的定义。所有的切入点都是连接点，只有被增强的连接点才是切入点。<br><strong>Advice</strong>：通知/增强，是指拦截到Joinpoint之后所要做的事情。通知的类型有：前置通知，后置通知，异常通知，最终通知和环绕通知。<br><strong>Introducetion</strong>：引介，是一种特殊的通知，在不修改类代码的前提下，Introducetion可以在运行期间为类动态地添加一些方法或者属性。<br><strong>Target</strong>：代理的目标对象。<br><strong>Weaving</strong>：织入，是把增强应用到目标对象来创建新的代理对象的过程。Spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。<br><strong>Proxy</strong>：代理对象，一个被AOP织入增强后，就产生的一个结果代理类。<br><strong>Aspect</strong>：切面，是切入点和通知（引介）的结合。</p><h2 id="3-2-学习Spring中AOP要明确的事"><a href="#3-2-学习Spring中AOP要明确的事" class="headerlink" title="3.2 学习Spring中AOP要明确的事"></a>3.2 学习Spring中AOP要明确的事</h2><p>a. 开发阶段（我们做的）<br>编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。<br>把公用代码抽取出来，制作成通知。（开发阶段最后在做）：AOP编程人员来做。<br>在排至文件中，声明切入点与通知之间的关系，通知哪些方法不需要增强，哪些通知什么时候执行等，即切面：AOP编程人员来做。<br>b. 运行阶段（Spring框架完成的）<br>Spring框架监控切入点方法的执行，一旦监控到切入点发方被循行，使用代理机制，动态创建目标对象的带俩对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p><h2 id="3-3-spring中AOP配置步骤"><a href="#3-3-spring中AOP配置步骤" class="headerlink" title="3.3 spring中AOP配置步骤"></a>3.3 spring中AOP配置步骤</h2><h3 id="3-3-1-基于xml的AOP配置"><a href="#3-3-1-基于xml的AOP配置" class="headerlink" title="3.3.1 基于xml的AOP配置"></a>3.3.1 基于xml的AOP配置</h3><ol><li>把通知Bean也交给spring管理配置</li><li>使用aop:config标签表明开始AOP的配置—&gt;</li><li>使用aop:aspect标签表明开始配置切面<pre><code>     id属性:给切面指定一个唯一标识     ref属性:指明通知类的id--&gt;</code></pre></li><li><p>在aop:aspect标签内部使用对应标签类配置通知的类型</p><pre><code>   我们现在示例是让println方法在切入点之前执行:前置通知   aop:before标签表示前置通知     method属性:用于指定Logger类中的哪个方法     pointcut属性:用于指定切入点表达式，该表达式的含义值得是对业务层中那些方法增强切入点表达式的写法：   关键字：execution(表达式)   表达式：访问修饰符 返回值 包名.包名...类名.方法名(参数列表)   表达式标准写法：public void com.service.impl.AccountServiceImpl.saveAccount()   访问修饰符可省略：void com.service.impl.AccountServiceImpl.saveAccount()   返回值可以使用通配符表示任意返回值：* com.service.impl.AccountServiceImpl.saveAccount()   全通配写法 ：* *..*.*(..)</code></pre></li></ol><h3 id="3-3-1-基于xml的AOP配置-1"><a href="#3-3-1-基于xml的AOP配置-1" class="headerlink" title="3.3.1 基于xml的AOP配置"></a>3.3.1 基于xml的AOP配置</h3><p>通过以下注解进行配置<br>括号中须指明配置有@Pointcut(切入点表达式)的方法名<br>@Before()<br>@AfterReturning()<br>@AfterThrowing()<br>@After()<br>@Around()</p><h1 id="4-Spring中的事务控制"><a href="#4-Spring中的事务控制" class="headerlink" title="4. Spring中的事务控制"></a>4. Spring中的事务控制</h1><p>JavaEE体系进行分层开发，事务控制位于业务层，Spring提供了分层涉及业务层的事务处理解决方案。Spring框架为我们提供了一组事务控制的接口，在spring-tx-包中。spring事务控制都是基于AOP的，它既可以使用编程的 方式实现，也可以使用配置的方式实现。</p><h2 id="4-1-Spring中事务控制的API"><a href="#4-1-Spring中事务控制的API" class="headerlink" title="4.1 Spring中事务控制的API"></a>4.1 Spring中事务控制的API</h2><h3 id="PlatformTransactionManager接口"><a href="#PlatformTransactionManager接口" class="headerlink" title="PlatformTransactionManager接口"></a>PlatformTransactionManager接口</h3><p>该接口有两个实现类：<br>DataSourceTransactionManager:使用Spring JDBC或者MyBatis进行持久化数据时使用。<br>HibernateTransactionManager:使用Hibernate版本进行持久化数据时使用。<br>实现类就是相当于配置bean。</p><h3 id="TransctionDefinition接口"><a href="#TransctionDefinition接口" class="headerlink" title="TransctionDefinition接口"></a>TransctionDefinition接口</h3><p>事务的定义信息对象。</p><h3 id="TransactionStatus接口"><a href="#TransactionStatus接口" class="headerlink" title="TransactionStatus接口"></a>TransactionStatus接口</h3><p>提供的是事务具体的运行状态，描述了某个时间点上事务对象的状态信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿#  1. IOC（控制反转，Inversion of Control）&lt;/p&gt;
&lt;p&gt;IOC：把创建对象的权力交给框架，是框架的重要特征，包括依赖注入和依赖查找。可降低类之间的耦合度。如果自己写代码，可以简单地通过工厂创建对象，若为单例可以将在初始化工厂时将对象放入容器
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://jwkang99.github.io/categories/Spring/"/>
    
    
      <category term="框架" scheme="https://jwkang99.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://jwkang99.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>139.单词拆分</title>
    <link href="https://jwkang99.github.io/posts/e43b0cf4.html"/>
    <id>https://jwkang99.github.io/posts/e43b0cf4.html</id>
    <published>2020-07-09T07:02:48.000Z</published>
    <updated>2020-07-22T14:01:15.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139.单词拆分"></a>139.单词拆分</h2><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><strong>题目描述</strong>：</h4><p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，判定&nbsp;<em>s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p><strong>说明：</strong></p><ul>   <li>拆分时可以重复使用字典中的单词。</li>   <li>你可以假设字典中没有重复的单词。</li></ul><p><strong>示例 1：</strong></p><pre><strong>输入:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]<strong>输出:</strong> true<strong>解释:</strong> 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</pre><p><strong>示例 2：</strong></p><pre><strong>输入:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]<strong>输出:</strong> true<strong>解释:</strong> 返回 true 因为 <code>&quot;</code>applepenapple<code>&quot;</code> 可以被拆分成 <code>&quot;</code>apple pen apple<code>&quot;</code>。&nbsp;    注意你可以重复使用字典中的单词。</pre><p><strong>示例 3：</strong></p><pre><strong>输入:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]<strong>输出:</strong> false</pre><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><strong>分析</strong>：</h4><h5 id="方法一：DFS"><a href="#方法一：DFS" class="headerlink" title="方法一：DFS"></a>方法一：DFS</h5><p>对于输入示例1：<code>s=&quot;leetcode&quot;,wordDict=[&quot;leet&quot;,&quot;code&quot;]</code>.</p><ul><li>先判断<code>l</code>是否在字典中，</li><li>若在字典中，则判断剩余字符串是否能拆分</li><li>若不在字典中，则判断<code>le</code>是否在字典中</li></ul><p><a href="/posts/e43b0cf4/139_1.png" data-fancybox="group" data-caption="139_1" class="fancybox"><img alt="139_1" style="zoom:36%;" title="139_1" data-src="/posts/e43b0cf4/139_1.png" class="lazyload"></a></p><p>如下为未优化的DFS代码；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将list转为set方便判断单词是否存在于字典中</span></span><br><span class="line">    <span class="keyword">return</span> wordBreakHelper(s,<span class="keyword">new</span> HashSet&lt;&gt;(wordDict),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">wordBreakHelper</span><span class="params">(String s, Set&lt;String&gt; wordDict, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start == s.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> end = start + <span class="number">1</span>; end &lt;= s.length(); end++)&#123;</span><br><span class="line">        <span class="comment">//若s.substring(start,end)在字典中，则判断剩余字符串是否可拆分</span></span><br><span class="line">        <span class="keyword">if</span>(wordDict.contains(s.substring(start,end)))&#123;</span><br><span class="line">            <span class="keyword">boolean</span> endRes = wordBreakHelper(s,wordDict,end);</span><br><span class="line">            <span class="comment">//若剩余字符串也可分则整个字符串可分，返回true</span></span><br><span class="line">            <span class="keyword">if</span>(endRes)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>由于存在冗余计算，在一些测试用例下会超时。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab&quot;</span><br><span class="line">[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;,&quot;aaaaa&quot;,&quot;aaaaaa&quot;,&quot;aaaaaaa&quot;,&quot;aaaaaaaa&quot;,&quot;aaaaaaaaa&quot;,&quot;aaaaaaaaaa&quot;]</span><br></pre></td></tr></table></figure></div><ul><li>首先判断<code>0</code>处的a在字典中，随后递归判断<code>1-end</code>子串是否可分。在判断<code>1-end</code>是否可分的递归中，同时判断出了<code>2-end、3-end、4-end...</code>是否可分，将这些结果记录下来</li><li>上一步中<code>0</code>和<code>1-end</code>的划分结果返回为<code>false</code>；随后判断<code>01</code>和<code>2-end</code>的划分是否可行，此时<code>2-end</code>的返回结果可直接使用记忆化结果，不用再递归计算结果。</li></ul><p><a href="/posts/e43b0cf4/139_2.png" data-fancybox="group" data-caption="139_2" class="fancybox"><img alt="139_2" style="zoom:36%;" title="139_2" data-src="/posts/e43b0cf4/139_2.png" class="lazyload"></a></p><p>如下为记忆化搜索的DFS代码；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,Boolean&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> wordBreakHelper(s,<span class="keyword">new</span> HashSet&lt;&gt;(wordDict),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">wordBreakHelper</span><span class="params">(String s, Set&lt;String&gt; wordDict,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start == s.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(start))&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> end = start + <span class="number">1</span>; end &lt;= s.length(); end++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(wordDict.contains(s.substring(start,end)))&#123;</span><br><span class="line">            <span class="keyword">boolean</span> startRes = wordBreakHelper(s,wordDict,end);</span><br><span class="line">            map.put(start,startRes);</span><br><span class="line">            <span class="keyword">if</span>(startRes)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(start,<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h5><p>用$dp[i]$表示$0-i$的子串是否可划分，转移方程可表示为：</p><script type="math/tex; mode=display">dp[i]=dp[0]\&\&check(1,i)||...||dp[j]\&\&check(j+1,i)</script><p>其中，$check(1,i)$表示判断子串$1-i$是否在字典中。</p><p>代码实现：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(wordDict);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[j] &amp;&amp; set.contains(s.substring(j,i)))&#123;</span><br><span class="line">                dp[i] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下述方法与上面的思想类似，不过转为判断字典中的每一个单词是否为当前子串的后缀，转移方程为：</p><script type="math/tex; mode=display">dp[i]=dp[i-curLen]\&\&check(i-curLen,i)</script><p>当前字典中的单词为<code>word</code>，单词长度为<code>curLen</code>，且<code>check(i-curLen,i)</code>判断子串的后缀<code>i-curLen..i</code>是否与<code>word</code>相等。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span>[] res = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>];</span><br><span class="line">    res[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length()+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(String word : wordDict)&#123;</span><br><span class="line">            <span class="keyword">int</span> curLen = word.length();</span><br><span class="line">            <span class="keyword">if</span>(curLen&lt;=i &amp;&amp; res[i-curLen] </span><br><span class="line">               &amp;&amp; word.equals(s.substring(i-curLen,i))) &#123;</span><br><span class="line">                res[i] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res[s.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="方法三：字典树（Trie）"><a href="#方法三：字典树（Trie）" class="headerlink" title="方法三：字典树（Trie）"></a>方法三：字典树（Trie）</h5><p><strong>字典树/前缀树</strong>。使用场景：<strong>需要大量地判断某个字符串是否是给定单词列表中的前缀/后缀</strong></p><p>（部分图片来自leetcode）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;139-单词拆分&quot;&gt;&lt;a href=&quot;#139-单词拆分&quot; class=&quot;headerlink&quot; title=&quot;139.单词拆分&quot;&gt;&lt;/a&gt;139.单词拆分&lt;/h2&gt;&lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://jwkang99.github.io/categories/leetcode/"/>
    
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://jwkang99.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://jwkang99.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL DB - Redis详解</title>
    <link href="https://jwkang99.github.io/posts/298b5fc3.html"/>
    <id>https://jwkang99.github.io/posts/298b5fc3.html</id>
    <published>2020-06-12T07:02:48.000Z</published>
    <updated>2021-06-11T10:17:17.298Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 分布缓存原理Redis 的全称是 Remote Dictionary Server（远程字典服务器）。它将数据以字典结构存储在内存中，应用可以直接到内存读写Redis存储的数据。</p><p>Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供<strong>字符串，哈希，列表，队列，集合</strong>结构直接存取，基于内存，可持久化。</p><p>Redis 集群是一个典型的去中心化结构，每个节点都负责一部分数据的存储，同时，每个节点还会进行<strong>主备</strong>设计来提高 Redis 的可靠性。</p><p>Redis 中与缓存关系最紧密的三个特性：<strong>支持多数据结构、支持持久化和主备同步</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Redis 分布缓存原理Redis 的全称是 Remote Dictionary Server（远程字典服务器）。它将数据以字典结构存储在内存中，应用可以直接到内存读写Redis存储的数据。&lt;/p&gt;
&lt;p&gt;Redis是一种支持key-value等多种数据结构的存储系统。可用
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://jwkang99.github.io/categories/uncategorized/"/>
    
    
      <category term="进阶" scheme="https://jwkang99.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="数据库" scheme="https://jwkang99.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="缓存" scheme="https://jwkang99.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>309.股票最大收益</title>
    <link href="https://jwkang99.github.io/posts/bc673c55.html"/>
    <id>https://jwkang99.github.io/posts/bc673c55.html</id>
    <published>2020-06-12T07:02:48.000Z</published>
    <updated>2020-07-22T13:50:30.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="309-股票最大收益"><a href="#309-股票最大收益" class="headerlink" title="309.股票最大收益"></a>309.股票最大收益</h2><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><strong>题目描述</strong>：</h4><p>给定一个整数数组，其中第<em>&nbsp;i</em>&nbsp;个元素代表了第&nbsp;<em>i</em>&nbsp;天的股票价格 。</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><ul>   <li>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</li>   <li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</li></ul><p><strong>示例:</strong></p><pre><strong>输入:</strong> [1,2,3,0,2]<strong>输出: </strong>3 <strong>解释:</strong> 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</pre><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><strong>分析</strong>：</h4><p>leetcode上股票类型的题目</p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121. 买卖股票的最佳时机</a></p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">122. 买卖股票的最佳时机 II</a></p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">123. 买卖股票的最佳时机 III</a></p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">188. 买卖股票的最佳时机 IV</a></p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">309. 最佳买卖股票时机含冷冻期</a></p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">714. 买卖股票的最佳时机含手续费</a></p><p><a href="https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/" target="_blank" rel="noopener">剑指 Offer 63. 股票的最大利润</a></p><p><strong>本题解析</strong>：</p><p>​        由于每一天可能存在冷冻期的状态，加上买入卖出一共三种状态，可是使用动态规划对每一天的状态进行表示。</p><p>​        使用$dp[i]$表示每一天结束之后的累计最大收益，对于每一天的状态表示如下：</p><ul><li>$dp[i][0]$ 表示第$i$天持有股票<ul><li>由于第$i$天持有股票，要么是继续持有$i-1$的股票，要么是第$i$天新买入一只股票</li><li>转移方程为：$dp[i][0] = max(dp[i-1][0],dp[i-1][2]-prices[i])$</li></ul></li><li>$dp[i][1]$表示第$i$天进行了卖出操作，即第$i$天结束之后不持有股票，且处于冷冻期，<ul><li>第$i$天结束之后不持有股票，且为冷冻期，则第$i$天进行了卖出操作，且$i-1$天需持有股票</li><li>转移方程为：$dp[i][1] = dp[i-1][0]+prices[i]$</li></ul></li><li>$dp[i][2]$表示第$i$天结束不持有股票，且不处于冷冻期  <ul><li>第$i$天结束之后不持有股票，且不是冷冻期，则$i-1$天没有买入且不是冷冻期，或者是$i-1$天是冷冻期</li><li>转移方程为：$dp[i][2] = max(dp[i-1][1],dp[i-1][2])$.</li></ul></li></ul><p>代码实现：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices==<span class="keyword">null</span> || prices.length&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//dp[i] 表示第i天结束之后的最大收益</span></span><br><span class="line">    <span class="comment">//dp[][0] 表示持有股票</span></span><br><span class="line">    <span class="comment">//dp[][1] 表示不持有股票，且处于冷冻期</span></span><br><span class="line">    <span class="comment">//dp[][2] 表示持有股票，且不处于冷冻期</span></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][<span class="number">3</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">2</span>]-prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + prices[i];</span><br><span class="line">        dp[i][<span class="number">2</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(dp[prices.length-<span class="number">1</span>][<span class="number">1</span>],dp[prices.length-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>由于$dp[i]$只和$dp[i-1]$有关，故可以进行矩阵压缩。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices==<span class="keyword">null</span> || prices.length&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//dp[i] 表示第i天结束之后的最大收益</span></span><br><span class="line">    <span class="comment">//dp[][0] 表示持有股票</span></span><br><span class="line">    <span class="comment">//dp[][1] 表示不持有股票，且处于冷冻期</span></span><br><span class="line">    <span class="comment">//dp[][2] 表示持有股票，且不处于冷冻期</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> new_dp0 = Math.max(dp[<span class="number">0</span>],dp[<span class="number">2</span>]-prices[i]);</span><br><span class="line">        <span class="keyword">int</span> new_dp1 = dp[<span class="number">0</span>] + prices[i];</span><br><span class="line">        <span class="keyword">int</span> new_dp2 = Math.max(dp[<span class="number">1</span>],dp[<span class="number">2</span>]);</span><br><span class="line">        dp[<span class="number">0</span>] = new_dp0;</span><br><span class="line">        dp[<span class="number">1</span>] = new_dp1;</span><br><span class="line">        dp[<span class="number">2</span>] = new_dp2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(dp[<span class="number">1</span>],dp[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;309-股票最大收益&quot;&gt;&lt;a href=&quot;#309-股票最大收益&quot; class=&quot;headerlink&quot; title=&quot;309.股票最大收益&quot;&gt;&lt;/a&gt;309.股票最大收益&lt;/h2&gt;&lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://jwkang99.github.io/categories/leetcode/"/>
    
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://jwkang99.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://jwkang99.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>字典树（Trie树）</title>
    <link href="https://jwkang99.github.io/posts/67cf0c47.html"/>
    <id>https://jwkang99.github.io/posts/67cf0c47.html</id>
    <published>2020-06-12T07:02:48.000Z</published>
    <updated>2021-06-04T13:39:09.630Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="算法" scheme="https://jwkang99.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="https://jwkang99.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://jwkang99.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://jwkang99.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
